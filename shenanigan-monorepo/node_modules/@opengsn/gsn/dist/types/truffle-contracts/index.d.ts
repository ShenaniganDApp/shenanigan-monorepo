/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="@openeth/truffle-typings" />
import BN from "bn.js";

export interface BasePaymasterContract
  extends Truffle.Contract<BasePaymasterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BasePaymasterInstance>;
}

export interface BaseRelayRecipientContract
  extends Truffle.Contract<BaseRelayRecipientInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BaseRelayRecipientInstance>;
}

export interface BatchForwarderContract
  extends Truffle.Contract<BatchForwarderInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BatchForwarderInstance>;
}

export interface ForwarderContract extends Truffle.Contract<ForwarderInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ForwarderInstance>;
}

export interface GsnEip712LibraryContract
  extends Truffle.Contract<GsnEip712LibraryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<GsnEip712LibraryInstance>;
}

export interface IForwarderContract
  extends Truffle.Contract<IForwarderInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IForwarderInstance>;
}

export interface IKnowForwarderAddressContract
  extends Truffle.Contract<IKnowForwarderAddressInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IKnowForwarderAddressInstance>;
}

export interface IPaymasterContract
  extends Truffle.Contract<IPaymasterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IPaymasterInstance>;
}

export interface IPenalizerContract
  extends Truffle.Contract<IPenalizerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IPenalizerInstance>;
}

export interface IRelayHubContract extends Truffle.Contract<IRelayHubInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRelayHubInstance>;
}

export interface IRelayRecipientContract
  extends Truffle.Contract<IRelayRecipientInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRelayRecipientInstance>;
}

export interface IStakeManagerContract
  extends Truffle.Contract<IStakeManagerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IStakeManagerInstance>;
}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
}

export interface PayableWithEmitContract
  extends Truffle.Contract<PayableWithEmitInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PayableWithEmitInstance>;
}

export interface PenalizerContract extends Truffle.Contract<PenalizerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PenalizerInstance>;
}

export interface RelayHubContract extends Truffle.Contract<RelayHubInstance> {
  "new"(
    _stakeManager: string | BN,
    _penalizer: string | BN,
    _maxWorkerCount: number | BN | string,
    _gasReserve: number | BN | string,
    _postOverhead: number | BN | string,
    _gasOverhead: number | BN | string,
    _maximumRecipientDeposit: number | BN | string,
    _minimumUnstakeDelay: number | BN | string,
    _minimumStake: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<RelayHubInstance>;
}

export interface StakeManagerContract
  extends Truffle.Contract<StakeManagerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<StakeManagerInstance>;
}

export interface TestForwarderContract
  extends Truffle.Contract<TestForwarderInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestForwarderInstance>;
}

export interface TestForwarderTargetContract
  extends Truffle.Contract<TestForwarderTargetInstance> {
  "new"(
    forwarder: string | BN,
    meta?: Truffle.TransactionDetails
  ): Promise<TestForwarderTargetInstance>;
}

export interface TestPaymasterConfigurableMisbehaviorContract
  extends Truffle.Contract<TestPaymasterConfigurableMisbehaviorInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<TestPaymasterConfigurableMisbehaviorInstance>;
}

export interface TestPaymasterEverythingAcceptedContract
  extends Truffle.Contract<TestPaymasterEverythingAcceptedInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<TestPaymasterEverythingAcceptedInstance>;
}

export interface TestPaymasterOwnerSignatureContract
  extends Truffle.Contract<TestPaymasterOwnerSignatureInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<TestPaymasterOwnerSignatureInstance>;
}

export interface TestPaymasterPreconfiguredApprovalContract
  extends Truffle.Contract<TestPaymasterPreconfiguredApprovalInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<TestPaymasterPreconfiguredApprovalInstance>;
}

export interface TestPaymasterStoreContextContract
  extends Truffle.Contract<TestPaymasterStoreContextInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<TestPaymasterStoreContextInstance>;
}

export interface TestPaymasterVariableGasLimitsContract
  extends Truffle.Contract<TestPaymasterVariableGasLimitsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<TestPaymasterVariableGasLimitsInstance>;
}

export interface TestRecipientContract
  extends Truffle.Contract<TestRecipientInstance> {
  "new"(
    forwarder: string | BN,
    meta?: Truffle.TransactionDetails
  ): Promise<TestRecipientInstance>;
}

export interface TestRelayWorkerContractContract
  extends Truffle.Contract<TestRelayWorkerContractInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<TestRelayWorkerContractInstance>;
}

export interface TestUtilContract extends Truffle.Contract<TestUtilInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestUtilInstance>;
}

export interface TestVersionsContract
  extends Truffle.Contract<TestVersionsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestVersionsInstance>;
}

export interface BasePaymasterInstance extends Truffle.ContractInstance {
  acceptRelayedCall(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    approvalData: string,
    maxPossibleGas: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  postRelayedCall: {
    (
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  preRelayedCall: {
    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  versionPaymaster(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getGasLimits(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    acceptRelayedCallGasLimit: string;
    preRelayedCallGasLimit: string;
    postRelayedCallGasLimit: string;
  }>;

  _verifySignature(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  setRelayHub: {
    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTrustedForwarder: {
    (forwarder: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  withdrawRelayHubDepositTo: {
    (
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface BaseRelayRecipientInstance extends Truffle.ContractInstance {
  versionRecipient(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isTrustedForwarder(
    forwarder: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface BatchForwarderInstance extends Truffle.ContractInstance {
  GENERIC_PARAMS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _getEncoded(
    req: {
      from: string | BN;
      to: string | BN;
      value: number | BN | string;
      gas: number | BN | string;
      nonce: number | BN | string;
      data: string;
    },
    requestTypeHash: string | BN,
    suffixData: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  execute: {
    (
      req: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      req: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string]>;
    sendTransaction(
      req: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      req: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getNonce(
    from: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  isTrustedForwarder(
    forwarder: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  registerRequestType: {
    (
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  typeHashes(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verify(
    req: {
      from: string | BN;
      to: string | BN;
      value: number | BN | string;
      gas: number | BN | string;
      nonce: number | BN | string;
      data: string;
    },
    domainSeparator: string | BN,
    requestTypeHash: string | BN,
    suffixData: string,
    sig: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  versionRecipient(txDetails?: Truffle.TransactionDetails): Promise<string>;

  sendBatch: {
    (
      targets: (string | BN)[],
      encodedFunctions: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      targets: (string | BN)[],
      encodedFunctions: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      targets: (string | BN)[],
      encodedFunctions: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      targets: (string | BN)[],
      encodedFunctions: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ForwarderInstance extends Truffle.ContractInstance {
  GENERIC_PARAMS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  typeHashes(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getNonce(
    from: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  verify(
    req: {
      from: string | BN;
      to: string | BN;
      value: number | BN | string;
      gas: number | BN | string;
      nonce: number | BN | string;
      data: string;
    },
    domainSeparator: string | BN,
    requestTypeHash: string | BN,
    suffixData: string,
    sig: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  execute: {
    (
      req: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      req: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string]>;
    sendTransaction(
      req: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      req: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerRequestType: {
    (
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _getEncoded(
    req: {
      from: string | BN;
      to: string | BN;
      value: number | BN | string;
      gas: number | BN | string;
      nonce: number | BN | string;
      data: string;
    },
    requestTypeHash: string | BN,
    suffixData: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface GsnEip712LibraryInstance extends Truffle.ContractInstance {
  EIP712DOMAIN_TYPEHASH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  GENERIC_PARAMS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  RELAYDATA_TYPE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  RELAYDATA_TYPEHASH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  RELAY_REQUEST_NAME(txDetails?: Truffle.TransactionDetails): Promise<string>;

  RELAY_REQUEST_SUFFIX(txDetails?: Truffle.TransactionDetails): Promise<string>;

  RELAY_REQUEST_TYPE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  RELAY_REQUEST_TYPEHASH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface IForwarderInstance extends Truffle.ContractInstance {
  getNonce(
    from: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  verify(
    forwardRequest: {
      from: string | BN;
      to: string | BN;
      value: number | BN | string;
      gas: number | BN | string;
      nonce: number | BN | string;
      data: string;
    },
    domainSeparator: string | BN,
    requestTypeHash: string | BN,
    suffixData: string,
    signature: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  execute: {
    (
      forwardRequest: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      forwardRequest: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string]>;
    sendTransaction(
      forwardRequest: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      forwardRequest: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerRequestType: {
    (
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      typeName: string,
      typeSuffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IKnowForwarderAddressInstance
  extends Truffle.ContractInstance {
  getTrustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface IPaymasterInstance extends Truffle.ContractInstance {
  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getGasLimits(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    acceptRelayedCallGasLimit: string;
    preRelayedCallGasLimit: string;
    postRelayedCallGasLimit: string;
  }>;

  acceptRelayedCall(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    approvalData: string,
    maxPossibleGas: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  preRelayedCall: {
    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  postRelayedCall: {
    (
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  versionPaymaster(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface IPenalizerInstance extends Truffle.ContractInstance {
  penalizeRepeatedNonce: {
    (
      unsignedTx1: string,
      signature1: string,
      unsignedTx2: string,
      signature2: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      unsignedTx1: string,
      signature1: string,
      unsignedTx2: string,
      signature2: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      unsignedTx1: string,
      signature1: string,
      unsignedTx2: string,
      signature2: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      unsignedTx1: string,
      signature1: string,
      unsignedTx2: string,
      signature2: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  penalizeIllegalTransaction: {
    (
      unsignedTx: string,
      signature: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      unsignedTx: string,
      signature: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      unsignedTx: string,
      signature: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      unsignedTx: string,
      signature: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  versionPenalizer(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface IRelayHubInstance extends Truffle.ContractInstance {
  addRelayWorkers: {
    (
      newRelayWorkers: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newRelayWorkers: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newRelayWorkers: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newRelayWorkers: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerRelayServer: {
    (
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositFor: {
    (target: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      amount: number | BN | string,
      dest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      dest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      dest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      dest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  relayCall: {
    (
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      approvalData: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      approvalData: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string]>;
    sendTransaction(
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      approvalData: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      approvalData: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  penalize: {
    (
      relayWorker: string | BN,
      beneficiary: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayWorker: string | BN,
      beneficiary: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayWorker: string | BN,
      beneficiary: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayWorker: string | BN,
      beneficiary: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateCharge(
    gasUsed: number | BN | string,
    relayData: {
      gasPrice: number | BN | string;
      pctRelayFee: number | BN | string;
      baseRelayFee: number | BN | string;
      relayWorker: string | BN;
      paymaster: string | BN;
      paymasterData: string;
      clientId: number | BN | string;
      forwarder: string | BN;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  stakeManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

  penalizer(txDetails?: Truffle.TransactionDetails): Promise<string>;

  balanceOf(
    target: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  minimumStake(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  minimumUnstakeDelay(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  maximumRecipientDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  postOverhead(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  gasReserve(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  maxWorkerCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  gasOverhead(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  versionHub(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface IRelayRecipientInstance extends Truffle.ContractInstance {
  isTrustedForwarder(
    forwarder: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  versionRecipient(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface IStakeManagerInstance extends Truffle.ContractInstance {
  stakeForAddress: {
    (
      relayManager: string | BN,
      unstakeDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayManager: string | BN,
      unstakeDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string | BN,
      unstakeDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string | BN,
      unstakeDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unlockStake: {
    (
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawStake: {
    (
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  authorizeHubByOwner: {
    (
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  authorizeHubByManager: {
    (relayHub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unauthorizeHubByOwner: {
    (
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unauthorizeHubByManager: {
    (relayHub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isRelayManagerStaked(
    relayManager: string | BN,
    minAmount: number | BN | string,
    minUnstakeDelay: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  penalizeRelayManager: {
    (
      relayManager: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayManager: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getStakeInfo(
    relayManager: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    stake: string;
    unstakeDelay: string;
    withdrawBlock: string;
    owner: string;
  }>;

  versionSM(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  last_completed_migration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setCompleted: {
    (
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgrade: {
    (newAddress: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface OwnableInstance extends Truffle.ContractInstance {
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface PayableWithEmitInstance extends Truffle.ContractInstance {
  isTrustedForwarder(
    forwarder: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  versionRecipient(txDetails?: Truffle.TransactionDetails): Promise<string>;

  doSend: {
    (target: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface PenalizerInstance extends Truffle.ContractInstance {
  versionPenalizer(txDetails?: Truffle.TransactionDetails): Promise<string>;

  penalizeRepeatedNonce: {
    (
      unsignedTx1: string,
      signature1: string,
      unsignedTx2: string,
      signature2: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      unsignedTx1: string,
      signature1: string,
      unsignedTx2: string,
      signature2: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      unsignedTx1: string,
      signature1: string,
      unsignedTx2: string,
      signature2: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      unsignedTx1: string,
      signature1: string,
      unsignedTx2: string,
      signature2: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  penalizeIllegalTransaction: {
    (
      unsignedTx: string,
      signature: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      unsignedTx: string,
      signature: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      unsignedTx: string,
      signature: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      unsignedTx: string,
      signature: string,
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface RelayHubInstance extends Truffle.ContractInstance {
  gasOverhead(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  gasReserve(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  maxWorkerCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  maximumRecipientDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  minimumStake(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  minimumUnstakeDelay(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  penalizer(txDetails?: Truffle.TransactionDetails): Promise<string>;

  postOverhead(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  stakeManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

  versionHub(txDetails?: Truffle.TransactionDetails): Promise<string>;

  workerCount(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  workerToManager(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  registerRelayServer: {
    (
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addRelayWorkers: {
    (
      newRelayWorkers: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newRelayWorkers: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newRelayWorkers: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newRelayWorkers: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositFor: {
    (target: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    target: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  withdraw: {
    (
      amount: number | BN | string,
      dest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      dest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      dest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      dest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  relayCall: {
    (
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      approvalData: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      approvalData: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string]>;
    sendTransaction(
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      approvalData: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      approvalData: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  innerRelayCall: {
    (
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      gasLimits: {
        acceptRelayedCallGasLimit: number | BN | string;
        preRelayedCallGasLimit: number | BN | string;
        postRelayedCallGasLimit: number | BN | string;
      },
      totalInitialGas: number | BN | string,
      recipientContext: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      gasLimits: {
        acceptRelayedCallGasLimit: number | BN | string;
        preRelayedCallGasLimit: number | BN | string;
        postRelayedCallGasLimit: number | BN | string;
      },
      totalInitialGas: number | BN | string,
      recipientContext: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, string]>;
    sendTransaction(
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      gasLimits: {
        acceptRelayedCallGasLimit: number | BN | string;
        preRelayedCallGasLimit: number | BN | string;
        postRelayedCallGasLimit: number | BN | string;
      },
      totalInitialGas: number | BN | string,
      recipientContext: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      gasLimits: {
        acceptRelayedCallGasLimit: number | BN | string;
        preRelayedCallGasLimit: number | BN | string;
        postRelayedCallGasLimit: number | BN | string;
      },
      totalInitialGas: number | BN | string,
      recipientContext: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateCharge(
    gasUsed: number | BN | string,
    relayData: {
      gasPrice: number | BN | string;
      pctRelayFee: number | BN | string;
      baseRelayFee: number | BN | string;
      relayWorker: string | BN;
      paymaster: string | BN;
      paymasterData: string;
      clientId: number | BN | string;
      forwarder: string | BN;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  penalize: {
    (
      relayWorker: string | BN,
      beneficiary: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayWorker: string | BN,
      beneficiary: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayWorker: string | BN,
      beneficiary: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayWorker: string | BN,
      beneficiary: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface StakeManagerInstance extends Truffle.ContractInstance {
  authorizedHubs(
    arg0: string | BN,
    arg1: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  stakes(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, string]>;

  versionSM(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getStakeInfo(
    relayManager: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    stake: string;
    unstakeDelay: string;
    withdrawBlock: string;
    owner: string;
  }>;

  stakeForAddress: {
    (
      relayManager: string | BN,
      unstakeDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayManager: string | BN,
      unstakeDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string | BN,
      unstakeDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string | BN,
      unstakeDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unlockStake: {
    (
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawStake: {
    (
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  authorizeHubByOwner: {
    (
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  authorizeHubByManager: {
    (relayHub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unauthorizeHubByOwner: {
    (
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string | BN,
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unauthorizeHubByManager: {
    (relayHub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayHub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isRelayManagerStaked(
    relayManager: string | BN,
    minAmount: number | BN | string,
    minUnstakeDelay: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  penalizeRelayManager: {
    (
      relayManager: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayManager: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface TestForwarderInstance extends Truffle.ContractInstance {
  callExecute: {
    (
      forwarder: string | BN,
      req: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      forwarder: string | BN,
      req: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      forwarder: string | BN,
      req: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      forwarder: string | BN,
      req: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      },
      domainSeparator: string | BN,
      requestTypeHash: string | BN,
      suffixData: string,
      sig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decodeErrorMessage(
    ret: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface TestForwarderTargetInstance extends Truffle.ContractInstance {
  isTrustedForwarder(
    forwarder: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  versionRecipient(txDetails?: Truffle.TransactionDetails): Promise<string>;

  emitMessage: {
    (message: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mustReceiveEth: {
    (
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  testRevert: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface TestPaymasterConfigurableMisbehaviorInstance
  extends Truffle.ContractInstance {
  _verifySignature(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  deposit: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getGasLimits(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    acceptRelayedCallGasLimit: string;
    preRelayedCallGasLimit: string;
    postRelayedCallGasLimit: string;
  }>;

  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  overspendAcceptGas(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  returnInvalidErrorCode(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  revertPostRelayCall(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  revertPreRelayCall(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  setRelayHub: {
    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTrustedForwarder: {
    (forwarder: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  versionPaymaster(txDetails?: Truffle.TransactionDetails): Promise<string>;

  withdrawAll: {
    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawDuringPostRelayedCall(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  withdrawDuringPreRelayedCall(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  withdrawRelayHubDepositTo: {
    (
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setWithdrawDuringPostRelayedCall: {
    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      val: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      val: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setWithdrawDuringPreRelayedCall: {
    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      val: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      val: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setReturnInvalidErrorCode: {
    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      val: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      val: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRevertPostRelayCall: {
    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      val: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      val: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRevertPreRelayCall: {
    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      val: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      val: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setOverspendAcceptGas: {
    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      val: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      val: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  acceptRelayedCall(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    approvalData: string,
    maxPossibleGas: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  preRelayedCall: {
    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  postRelayedCall: {
    (
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawAllBalance: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface TestPaymasterEverythingAcceptedInstance
  extends Truffle.ContractInstance {
  _verifySignature(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  getGasLimits(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    acceptRelayedCallGasLimit: string;
    preRelayedCallGasLimit: string;
    postRelayedCallGasLimit: string;
  }>;

  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setRelayHub: {
    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTrustedForwarder: {
    (forwarder: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawRelayHubDepositTo: {
    (
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  versionPaymaster(txDetails?: Truffle.TransactionDetails): Promise<string>;

  acceptRelayedCall(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    approvalData: string,
    maxPossibleGas: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  preRelayedCall: {
    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  postRelayedCall: {
    (
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  withdrawAll: {
    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface TestPaymasterOwnerSignatureInstance
  extends Truffle.ContractInstance {
  _verifySignature(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  deposit: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getGasLimits(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    acceptRelayedCallGasLimit: string;
    preRelayedCallGasLimit: string;
    postRelayedCallGasLimit: string;
  }>;

  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  postRelayedCall: {
    (
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  preRelayedCall: {
    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setRelayHub: {
    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTrustedForwarder: {
    (forwarder: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  versionPaymaster(txDetails?: Truffle.TransactionDetails): Promise<string>;

  withdrawAll: {
    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawRelayHubDepositTo: {
    (
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  acceptRelayedCall(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    approvalData: string,
    maxPossibleGas: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface TestPaymasterPreconfiguredApprovalInstance
  extends Truffle.ContractInstance {
  _verifySignature(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  deposit: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  expectedApprovalData(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getGasLimits(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    acceptRelayedCallGasLimit: string;
    preRelayedCallGasLimit: string;
    postRelayedCallGasLimit: string;
  }>;

  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  postRelayedCall: {
    (
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  preRelayedCall: {
    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setRelayHub: {
    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTrustedForwarder: {
    (forwarder: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  versionPaymaster(txDetails?: Truffle.TransactionDetails): Promise<string>;

  withdrawAll: {
    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawRelayHubDepositTo: {
    (
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setExpectedApprovalData: {
    (val: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(val: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      val: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      val: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  acceptRelayedCall(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    approvalData: string,
    maxPossibleGas: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface TestPaymasterStoreContextInstance
  extends Truffle.ContractInstance {
  _verifySignature(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  deposit: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getGasLimits(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    acceptRelayedCallGasLimit: string;
    preRelayedCallGasLimit: string;
    postRelayedCallGasLimit: string;
  }>;

  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setRelayHub: {
    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTrustedForwarder: {
    (forwarder: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  versionPaymaster(txDetails?: Truffle.TransactionDetails): Promise<string>;

  withdrawAll: {
    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawRelayHubDepositTo: {
    (
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  acceptRelayedCall(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    approvalData: string,
    maxPossibleGas: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  preRelayedCall: {
    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  postRelayedCall: {
    (
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface TestPaymasterVariableGasLimitsInstance
  extends Truffle.ContractInstance {
  _verifySignature(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  deposit: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getGasLimits(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    acceptRelayedCallGasLimit: string;
    preRelayedCallGasLimit: string;
    postRelayedCallGasLimit: string;
  }>;

  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setRelayHub: {
    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hub: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTrustedForwarder: {
    (forwarder: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      forwarder: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  versionPaymaster(txDetails?: Truffle.TransactionDetails): Promise<string>;

  withdrawAll: {
    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawRelayHubDepositTo: {
    (
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      target: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  acceptRelayedCall(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    approvalData: string,
    maxPossibleGas: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  preRelayedCall: {
    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  postRelayedCall: {
    (
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      context: string,
      success: boolean,
      preRetVal: string | BN,
      gasUseWithoutPost: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface TestRecipientInstance extends Truffle.ContractInstance {
  isTrustedForwarder(
    forwarder: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  paymaster(txDetails?: Truffle.TransactionDetails): Promise<string>;

  versionRecipient(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getTrustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  testRevert: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setWithdrawDuringRelayedCall: {
    (_paymaster: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _paymaster: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _paymaster: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _paymaster: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  emitMessage: {
    (message: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawAllBalance: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  dontEmitMessage: {
    (message: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      message: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  emitMessageNoParams: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface TestRelayWorkerContractInstance
  extends Truffle.ContractInstance {
  relayCall: {
    (
      hub: string | BN,
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      hub: string | BN,
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hub: string | BN,
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hub: string | BN,
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface TestUtilInstance extends Truffle.ContractInstance {
  libRelayRequestName(txDetails?: Truffle.TransactionDetails): Promise<string>;

  libRelayRequestType(txDetails?: Truffle.TransactionDetails): Promise<string>;

  libRelayRequestTypeHash(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  libRelayRequestSuffix(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  callForwarderVerify(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    signature: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  callForwarderVerifyAndCall: {
    (
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string]>;
    sendTransaction(
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayRequest: {
        request: {
          from: string | BN;
          to: string | BN;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string | BN;
          paymaster: string | BN;
          paymasterData: string;
          clientId: number | BN | string;
          forwarder: string | BN;
        };
      },
      signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  splitRequest(
    relayRequest: {
      request: {
        from: string | BN;
        to: string | BN;
        value: number | BN | string;
        gas: number | BN | string;
        nonce: number | BN | string;
        data: string;
      };
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string | BN;
        paymaster: string | BN;
        paymasterData: string;
        clientId: number | BN | string;
        forwarder: string | BN;
      };
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      {
        from: string;
        to: string;
        value: string;
        gas: string;
        nonce: string;
        data: string;
      },
      string,
      string
    ]
  >;

  libDomainSeparator(
    forwarder: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  libGetChainID(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface TestVersionsInstance extends Truffle.ContractInstance {
  versionHub(txDetails?: Truffle.TransactionDetails): Promise<string>;
}
