"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GsnTestEnvironment_1 = require("../src/relayclient/GsnTestEnvironment");
const test_helpers_1 = require("@openzeppelin/test-helpers");
const TestRecipient = artifacts.require('TestRecipient');
contract('GsnTestEnvironment', function () {
    let host;
    before(function () {
        var _a;
        host = (_a = web3.currentProvider.host) !== null && _a !== void 0 ? _a : 'localhost';
    });
    describe('#startGsn()', function () {
        it('should create a valid test environment for other tests to rely on', async function () {
            const host = web3.currentProvider.host;
            const testEnv = await GsnTestEnvironment_1.GsnTestEnvironment.startGsn(host);
            assert.equal(testEnv.deploymentResult.relayHubAddress.length, 42);
        });
        after(async function () {
            await GsnTestEnvironment_1.GsnTestEnvironment.stopGsn();
        });
    });
    context('using RelayClient', () => {
        let sr;
        let sender;
        let testEnvironment;
        let relayClient;
        before(async () => {
            sender = await web3.eth.personal.newAccount('password');
            testEnvironment = await GsnTestEnvironment_1.GsnTestEnvironment.startGsn(host);
            relayClient = testEnvironment.relayProvider.relayClient;
            sr = await TestRecipient.new(testEnvironment.deploymentResult.forwarderAddress);
        });
        after(async () => {
            await GsnTestEnvironment_1.GsnTestEnvironment.stopGsn();
        });
        it('should relay using relayTransaction', async () => {
            const ret = await relayClient.relayTransaction({
                from: sender,
                to: sr.address,
                forwarder: await sr.getTrustedForwarder(),
                paymaster: testEnvironment.deploymentResult.naivePaymasterAddress,
                gas: '0x' + 1e6.toString(16),
                data: sr.contract.methods.emitMessage('hello').encodeABI()
            });
            assert.deepEqual([...ret.relayingErrors.values(), ...ret.pingErrors.values()], []);
            const events = await sr.contract.getPastEvents();
            assert.equal(events[0].event, 'SampleRecipientEmitted');
            assert.equal(events[0].returnValues.realSender.toLocaleLowerCase(), sender.toLocaleLowerCase());
        });
    });
    context('using RelayProvider', () => {
        let sr;
        let sender;
        let testEnvironment;
        before(async function () {
            sender = await web3.eth.personal.newAccount('password');
            testEnvironment = await GsnTestEnvironment_1.GsnTestEnvironment.startGsn(host);
            sr = await TestRecipient.new(testEnvironment.deploymentResult.forwarderAddress);
            // @ts-ignore
            TestRecipient.web3.setProvider(testEnvironment.relayProvider);
        });
        after(async () => {
            await GsnTestEnvironment_1.GsnTestEnvironment.stopGsn();
        });
        it('should send relayed transaction through RelayProvider', async () => {
            const txDetails = {
                from: sender,
                paymaster: testEnvironment.deploymentResult.naivePaymasterAddress,
                forwarder: await sr.getTrustedForwarder()
            };
            const ret = await sr.emitMessage('hello', txDetails);
            test_helpers_1.expectEvent(ret, 'SampleRecipientEmitted', {
                realSender: sender
            });
        });
    });
});
//# sourceMappingURL=GsnTestEnvironment.test.js.map