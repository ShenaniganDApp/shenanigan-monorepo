"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
const TypedRequestData_1 = require("../src/common/EIP712/TypedRequestData");
const TestUtils_1 = require("./TestUtils");
const StakeManager = artifacts.require('StakeManager');
const Penalizer = artifacts.require('Penalizer');
const TestRecipient = artifacts.require('TestRecipient');
const TestPaymasterEverythingAccepted = artifacts.require('TestPaymasterEverythingAccepted');
const Forwarder = artifacts.require('Forwarder');
contract('SampleRecipient', function (accounts) {
    const expectedRealSender = accounts[0];
    const message = 'hello world';
    let sample;
    let paymaster;
    let forwarderInstance;
    let forwarder;
    before(async function () {
        forwarderInstance = await Forwarder.new();
        forwarder = forwarderInstance.address;
        sample = await TestRecipient.new(forwarder);
        paymaster = await TestPaymasterEverythingAccepted.new();
    });
    it('should emit message with msgSender and realSender', async function () {
        const result = await sample.emitMessage(message);
        const log = result.logs[0];
        const args = log.args;
        assert.equal('SampleRecipientEmitted', log.event);
        assert.equal(args.message, message);
        assert.equal(accounts[0], args.msgSender);
        assert.equal(expectedRealSender, args.realSender);
    });
    // TODO: this test is in a wrong file
    it('should allow owner to withdraw balance from RelayHub', async function () {
        const deposit = new bn_js_1.default('100000000000000000');
        const stakeManager = await StakeManager.new();
        const penalizer = await Penalizer.new();
        const rhub = await TestUtils_1.deployHub(stakeManager.address, penalizer.address);
        await paymaster.setRelayHub(rhub.address);
        await forwarderInstance.registerRequestType(TypedRequestData_1.GsnRequestType.typeName, TypedRequestData_1.GsnRequestType.typeSuffix);
        // transfer eth into paymaster (using the normal "transfer" helper, which internally
        // uses hub.depositFor)
        await web3.eth.sendTransaction({
            from: accounts[0],
            to: paymaster.address,
            value: deposit
        });
        let depositActual = await rhub.balanceOf(paymaster.address);
        assert.equal(deposit.toString(), depositActual.toString());
        const a0BalanceBefore = await web3.eth.getBalance(accounts[0]);
        const gasPrice = 1;
        const owner = await paymaster.owner();
        const res = await paymaster.withdrawRelayHubDepositTo(depositActual, owner, {
            from: owner,
            gasPrice: gasPrice
        });
        const a0BalanceAfter = await web3.eth.getBalance(accounts[0]);
        const expectedBalanceAfter = new bn_js_1.default(a0BalanceBefore).add(deposit).subn(res.receipt.gasUsed * gasPrice);
        assert.equal(expectedBalanceAfter.toString(), a0BalanceAfter.toString());
        depositActual = await rhub.balanceOf(paymaster.address);
        assert.equal('0', depositActual.toString());
    });
});
//# sourceMappingURL=SampleRecipient.test.js.map