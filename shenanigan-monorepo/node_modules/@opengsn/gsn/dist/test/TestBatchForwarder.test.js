"use strict";
/* global contract artifacts before it */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_helpers_1 = require("@openzeppelin/test-helpers");
const RelayRequest_1 = require("../src/common/EIP712/RelayRequest");
const TypedRequestData_1 = __importStar(require("../src/common/EIP712/TypedRequestData"));
const Utils_1 = require("../src/common/Utils");
const Environments_1 = require("../src/common/Environments");
const TestUtils_1 = require("./TestUtils");
const TestPaymasterEverythingAccepted = artifacts.require('TestPaymasterEverythingAccepted.sol');
const StakeManager = artifacts.require('StakeManager');
const Penalizer = artifacts.require('Penalizer');
const BatchForwarder = artifacts.require('BatchForwarder');
const TestRecipient = artifacts.require('TestRecipient');
contract('BatchForwarder', ([from, relayManager, relayWorker, relayOwner]) => {
    let paymaster;
    let recipient;
    let hub;
    let forwarder;
    let sharedRelayRequestData;
    const chainId = Environments_1.defaultEnvironment.chainId;
    before(async () => {
        const paymasterDeposit = 1e18.toString();
        const stakeManager = await StakeManager.new();
        const penalizer = await Penalizer.new();
        hub = await TestUtils_1.deployHub(stakeManager.address, penalizer.address);
        const relayHub = hub;
        await stakeManager.stakeForAddress(relayManager, 2000, {
            value: test_helpers_1.ether('2'),
            from: relayOwner
        });
        await stakeManager.authorizeHubByOwner(relayManager, relayHub.address, { from: relayOwner });
        const baseRelayFee = 1;
        const pctRelayFee = 2;
        await relayHub.addRelayWorkers([relayWorker], { from: relayManager });
        await relayHub.registerRelayServer(baseRelayFee, pctRelayFee, 'url', { from: relayManager });
        paymaster = await TestPaymasterEverythingAccepted.new({ gas: 1e7 });
        await hub.depositFor(paymaster.address, { value: paymasterDeposit });
        forwarder = await BatchForwarder.new();
        await forwarder.registerRequestType(TypedRequestData_1.GsnRequestType.typeName, TypedRequestData_1.GsnRequestType.typeSuffix);
        recipient = await TestRecipient.new(forwarder.address);
        await paymaster.setRelayHub(hub.address);
        sharedRelayRequestData = {
            request: {
                to: recipient.address,
                data: '',
                from,
                nonce: '1',
                value: '0',
                gas: 1e6.toString()
            },
            relayData: {
                pctRelayFee: '1',
                baseRelayFee: '0',
                gasPrice: await web3.eth.getGasPrice(),
                relayWorker: relayWorker,
                forwarder: forwarder.address,
                paymaster: paymaster.address,
                paymasterData: '0x',
                clientId: '1'
            }
        };
    });
    context('#sendBatch', function () {
        it('should send all methods in the batch', async () => {
            const relayRequest = RelayRequest_1.cloneRelayRequest(sharedRelayRequestData);
            relayRequest.request.nonce = (await forwarder.getNonce(from)).toString();
            relayRequest.request.to = forwarder.address;
            relayRequest.relayData.gasPrice = 1e6.toString();
            relayRequest.request.data = forwarder.contract.methods.sendBatch([recipient.address, recipient.address], [
                recipient.contract.methods.emitMessage('hello').encodeABI(),
                recipient.contract.methods.emitMessage('world').encodeABI()
            ]).encodeABI();
            const dataToSign = new TypedRequestData_1.default(chainId, forwarder.address, relayRequest);
            const signature = await Utils_1.getEip712Signature(web3, dataToSign);
            const ret = await hub.relayCall(relayRequest, signature, '0x', 7e6, {
                from: relayWorker
            });
            // console.log(getLogs(ret))
            const relayed = ret.logs.find(log => log.event === 'TransactionRelayed');
            assert.equal(relayed.args.status, 0);
            // @ts-ignore
            const logs = await recipient.getPastEvents({ fromBlock: 1 });
            const testevents = logs.filter((e) => e.event === 'SampleRecipientEmitted');
            assert.equal(testevents.length, 2);
            assert.equal(testevents[0].args.realSender, from);
        });
        it('should revert all requests if one fails', async () => {
            const relayRequest = RelayRequest_1.cloneRelayRequest(sharedRelayRequestData);
            relayRequest.request.nonce = (await forwarder.getNonce(from)).toString();
            relayRequest.request.to = forwarder.address;
            relayRequest.relayData.gasPrice = 1e6.toString();
            relayRequest.request.data = forwarder.contract.methods.sendBatch([recipient.address, recipient.address], [
                recipient.contract.methods.emitMessage('hello').encodeABI(),
                recipient.contract.methods.testRevert().encodeABI()
            ]).encodeABI();
            const dataToSign = new TypedRequestData_1.default(chainId, forwarder.address, relayRequest);
            const signature = await Utils_1.getEip712Signature(web3, dataToSign);
            const ret = await hub.relayCall(relayRequest, signature, '0x', 7e6, {
                from: relayWorker
            });
            test_helpers_1.expectEvent(ret, 'TransactionRelayed', { status: '1' });
        });
        it('should not batch with wrong # of params', async () => {
            const relayRequest = RelayRequest_1.cloneRelayRequest(sharedRelayRequestData);
            relayRequest.request.nonce = (await forwarder.getNonce(from)).toString();
            relayRequest.request.to = forwarder.address;
            relayRequest.relayData.gasPrice = 1e6.toString();
            relayRequest.request.data = forwarder.contract.methods.sendBatch([recipient.address, recipient.address], [
                recipient.contract.methods.emitMessage('hello').encodeABI()
            ]).encodeABI();
            const dataToSign = new TypedRequestData_1.default(chainId, forwarder.address, relayRequest);
            const signature = await Utils_1.getEip712Signature(web3, dataToSign);
            const ret = await hub.relayCall(relayRequest, signature, '0x', 7e6, {
                from: relayWorker
            });
            test_helpers_1.expectEvent(ret, 'TransactionRelayed', { status: '1' });
        });
    });
});
//# sourceMappingURL=TestBatchForwarder.test.js.map