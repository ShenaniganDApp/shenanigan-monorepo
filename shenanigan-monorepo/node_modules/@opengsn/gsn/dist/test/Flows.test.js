"use strict";
// test various flows, in multiple modes:
// once in Direct mode, and once in Relay (gasless) mode.
// the two modes must behave just the same (with an exception of gasless test, which must fail on direct mode, and must
// succeed in gasless)
// the entire 'contract' test is doubled. all tests titles are prefixed by either "Direct:" or "Relay:"
Object.defineProperty(exports, "__esModule", { value: true });
const RelayProvider_1 = require("../src/relayclient/RelayProvider");
const TestUtils_1 = require("./TestUtils");
const TypedRequestData_1 = require("../src/common/EIP712/TypedRequestData");
const TestRecipient = artifacts.require('tests/TestRecipient');
const TestPaymasterEverythingAccepted = artifacts.require('tests/TestPaymasterEverythingAccepted');
const TestPaymasterPreconfiguredApproval = artifacts.require('tests/TestPaymasterPreconfiguredApproval');
const StakeManager = artifacts.require('StakeManager');
const Penalizer = artifacts.require('Penalizer');
const Forwarder = artifacts.require('Forwarder');
const options = [
    {
        title: 'Direct-',
        relay: false
    },
    {
        title: 'Relayed-',
        relay: true
    }
];
options.forEach(params => {
    contract(params.title + 'Flow', function (accounts) {
        let from;
        let sr;
        let paymaster;
        let rhub;
        let sm;
        let gasless;
        let relayproc;
        let relayClientConfig;
        before(async () => {
            const gasPricePercent = 20;
            gasless = await web3.eth.personal.newAccount('password');
            await web3.eth.personal.unlockAccount(gasless, 'password', 0);
            sm = await StakeManager.new();
            const p = await Penalizer.new();
            rhub = await TestUtils_1.deployHub(sm.address, p.address);
            if (params.relay) {
                relayproc = await TestUtils_1.startRelay(rhub.address, sm, {
                    stake: 1e18,
                    delay: 3600 * 24 * 7,
                    pctRelayFee: 12,
                    url: 'asd',
                    relayOwner: accounts[0],
                    // @ts-ignore
                    ethereumNodeUrl: web3.currentProvider.host,
                    gasPricePercent: gasPricePercent,
                    relaylog: process.env.relaylog
                });
                console.log('relay started');
                from = gasless;
            }
            else {
                from = accounts[0];
            }
            const forwarder = await Forwarder.new();
            sr = await TestRecipient.new(forwarder.address);
            await forwarder.registerRequestType(TypedRequestData_1.GsnRequestType.typeName, TypedRequestData_1.GsnRequestType.typeSuffix);
            paymaster = await TestPaymasterEverythingAccepted.new();
            await paymaster.setRelayHub(rhub.address);
        });
        after(async function () {
            await TestUtils_1.stopRelay(relayproc);
        });
        if (params.relay) {
            before(params.title + 'enable relay', async function () {
                await rhub.depositFor(paymaster.address, { value: (1e18).toString() });
                relayClientConfig = {
                    relayHubAddress: rhub.address,
                    stakeManagerAddress: sm.address,
                    paymasterAddress: paymaster.address,
                    verbose: false
                };
                // @ts-ignore
                const relayProvider = new RelayProvider_1.RelayProvider(web3.currentProvider, relayClientConfig);
                // web3.setProvider(relayProvider)
                // NOTE: in real application its enough to set the provider in web3.
                // however, in Truffle, all contracts are built BEFORE the test have started, and COPIED the web3,
                // so changing the global one is not enough...
                TestRecipient.web3.setProvider(relayProvider);
            });
        }
        it(params.title + 'send normal transaction', async () => {
            console.log('running emitMessage (should succeed)');
            let res;
            try {
                const gas = await sr.contract.methods.emitMessage('hello').estimateGas();
                res = await sr.emitMessage('hello', { from: from, gas });
            }
            catch (e) {
                console.log('error is ', e.message);
                throw e;
            }
            assert.equal('hello', res.logs[0].args.message);
        });
        it(params.title + 'send gasless tranasaction', async () => {
            console.log('gasless=' + gasless);
            console.log('running gasless-emitMessage (should fail for direct, succeed for relayed)');
            let ex;
            try {
                const res = await sr.emitMessage('hello, from gasless', { from: gasless, gas: 1e6 });
                console.log('res after gasless emit:', res.logs[0].args.message);
            }
            catch (e) {
                ex = e;
            }
            if (params.relay) {
                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                assert.ok(ex == null, `should succeed sending gasless transaction through relay. got: ${ex === null || ex === void 0 ? void 0 : ex.toString()}`);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-base-to-string,@typescript-eslint/restrict-template-expressions
                assert.ok(ex.toString().indexOf('funds') > 0, `Expected Error with 'funds'. got: ${ex === null || ex === void 0 ? void 0 : ex.toString()}`);
            }
        });
        it(params.title + 'running testRevert (should always fail)', async () => {
            await asyncShouldThrow(async () => {
                await sr.testRevert({ from: from });
            }, 'revert');
        });
        if (params.relay) {
            let approvalPaymaster;
            describe('request with approvaldata', () => {
                let approvalData;
                before(async function () {
                    approvalPaymaster = await TestPaymasterPreconfiguredApproval.new();
                    await approvalPaymaster.setRelayHub(rhub.address);
                    await rhub.depositFor(approvalPaymaster.address, { value: (1e18).toString() });
                    const relayProvider = 
                    // @ts-ignore
                    new RelayProvider_1.RelayProvider(web3.currentProvider, relayClientConfig, { asyncApprovalData: async () => await Promise.resolve(approvalData) });
                    TestRecipient.web3.setProvider(relayProvider);
                });
                it(params.title + 'wait for specific approvalData', async () => {
                    try {
                        await approvalPaymaster.setExpectedApprovalData('0x414243', {
                            from: accounts[0],
                            useGSN: false
                        });
                        approvalData = '0x414243';
                        await sr.emitMessage('xxx', {
                            from: gasless,
                            paymaster: approvalPaymaster.address
                        });
                    }
                    catch (e) {
                        console.log('error1: ', e);
                        throw e;
                    }
                    finally {
                        await approvalPaymaster.setExpectedApprovalData('0x', {
                            from: accounts[0],
                            useGSN: false
                        });
                    }
                });
                it(params.title + 'fail on no approval data', async () => {
                    try {
                        // @ts-ignore
                        await approvalPaymaster.setExpectedApprovalData(Buffer.from('hello1'), {
                            from: accounts[0],
                            useGSN: false
                        });
                        await asyncShouldThrow(async () => {
                            approvalData = '0x';
                            await sr.emitMessage('xxx', {
                                from: gasless,
                                paymaster: approvalPaymaster.address
                            });
                        }, 'unexpected approvalData: \'\' instead of');
                    }
                    catch (e) {
                        console.log('error3: ', e);
                        throw e;
                    }
                    finally {
                        // @ts-ignore
                        await approvalPaymaster.setExpectedApprovalData(Buffer.from(''), {
                            from: accounts[0],
                            useGSN: false
                        });
                    }
                });
            });
        }
        async function asyncShouldThrow(asyncFunc, str) {
            const msg = str !== null && str !== void 0 ? str : 'Error';
            let ex;
            try {
                await asyncFunc();
            }
            catch (e) {
                ex = e;
            }
            assert.ok(ex != null, `Expected to throw ${msg} but threw nothing`);
            const isExpectedError = ex === null || ex === void 0 ? void 0 : ex.toString().includes(msg);
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            assert.ok(isExpectedError, `Expected to throw ${msg} but threw ${ex === null || ex === void 0 ? void 0 : ex.message}`);
        }
    });
});
//# sourceMappingURL=Flows.test.js.map