"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = __importDefault(require("chai"));
const chai_as_promised_1 = __importDefault(require("chai-as-promised"));
const RelayClient_1 = require("../../src/relayclient/RelayClient");
const { expect } = chai_1.default.use(chai_as_promised_1.default);
const TestVersions = artifacts.require('TestVersions');
contract('ContractInteractor', function () {
    let testVersions;
    before(async function () {
        testVersions = await TestVersions.new();
    });
    context('#_validateCompatibility()', function () {
        it('should throw if the hub version is incompatible', async function () {
            const relayClient = new RelayClient_1.RelayClient(web3.currentProvider, {
                relayHubAddress: testVersions.address
            });
            await expect(relayClient._init()).to.be.eventually.rejectedWith('Provided Hub version(3.0.0) is not supported by the current interactor');
        });
        it('should not throw if the hub address is not configured', async function () {
            const relayClient = new RelayClient_1.RelayClient(web3.currentProvider, {});
            await relayClient._init();
        });
    });
});
//# sourceMappingURL=ContractInteractor.test.js.map