"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AccountManager_1 = __importDefault(require("../../src/relayclient/AccountManager"));
const Environments_1 = require("../../src/common/Environments");
const test_helpers_1 = require("@openzeppelin/test-helpers");
const sinon_1 = __importDefault(require("sinon"));
const eth_sig_util_1 = __importDefault(require("eth-sig-util"));
const Utils_1 = require("../../src/common/Utils");
const chai_1 = __importDefault(require("chai"));
const sinon_chai_1 = __importDefault(require("sinon-chai"));
const GSNConfigurator_1 = require("../../src/relayclient/GSNConfigurator");
const TypedRequestData_1 = __importDefault(require("../../src/common/EIP712/TypedRequestData"));
const chai_as_promised_1 = __importDefault(require("chai-as-promised"));
const { expect, assert } = chai_1.default.use(chai_as_promised_1.default);
chai_1.default.use(sinon_chai_1.default);
contract('AccountManager', function (accounts) {
    const address = '0x982a8CbE734cb8c29A6a7E02a3B0e4512148F6F9';
    const keypair = {
        privateKey: Buffer.from('d353907ab062133759f149a3afcb951f0f746a65a60f351ba05a3ebf26b67f5c', 'hex'),
        address
    };
    const config = GSNConfigurator_1.configureGSN({
        verbose: false,
        methodSuffix: '',
        jsonStringifyRequest: false
    });
    const accountManager = new AccountManager_1.default(web3.currentProvider, Environments_1.defaultEnvironment.chainId, config);
    // @ts-ignore
    sinon_1.default.spy(accountManager);
    describe('#addAccount()', function () {
        it('should save the provided keypair internally', function () {
            accountManager.addAccount(keypair);
            // @ts-ignore
            assert.equal(accountManager.accounts[0].privateKey.toString(), keypair.privateKey.toString());
            // @ts-ignore
            assert.equal(accountManager.accounts[0].address, keypair.address);
        });
        it('should throw if the provided keypair is not valid', function () {
            const keypair = {
                privateKey: Buffer.from('AAAAAAAAAAAAA6a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d', 'hex'),
                address
            };
            expect(() => {
                accountManager.addAccount(keypair);
            }).to.throw('invalid keypair');
        });
    });
    describe('#newAccount()', function () {
        const accountManager = new AccountManager_1.default(web3.currentProvider, Environments_1.defaultEnvironment.chainId, config);
        it('should create a new keypair, return it and save it internally', function () {
            const keypair = accountManager.newAccount();
            // @ts-ignore
            assert.equal(accountManager.accounts[0].privateKey.toString(), keypair.privateKey.toString());
            assert.equal(accountManager.getAccounts()[0], keypair.address);
        });
    });
    describe('#sign()', function () {
        accountManager.addAccount(keypair);
        const relayRequest = {
            request: {
                to: test_helpers_1.constants.ZERO_ADDRESS,
                data: '0x123',
                from: '',
                nonce: '1',
                value: '0',
                gas: '1'
            },
            relayData: {
                pctRelayFee: '1',
                baseRelayFee: '1',
                gasPrice: '1',
                relayWorker: test_helpers_1.constants.ZERO_ADDRESS,
                forwarder: test_helpers_1.constants.ZERO_ADDRESS,
                paymaster: test_helpers_1.constants.ZERO_ADDRESS,
                paymasterData: '0x',
                clientId: '1'
            }
        };
        beforeEach(function () {
            sinon_1.default.resetHistory();
        });
        function relayRequestWithoutExtraData(relayRequest) {
            const cloneRequest = Object.assign({}, relayRequest);
            return cloneRequest;
        }
        it('should use internally controlled keypair for signing if available', async function () {
            relayRequest.request.from = address;
            const signedData = new TypedRequestData_1.default(Environments_1.defaultEnvironment.chainId, test_helpers_1.constants.ZERO_ADDRESS, relayRequestWithoutExtraData(relayRequest));
            const signature = await accountManager.sign(relayRequest);
            // @ts-ignore
            const rec = eth_sig_util_1.default.recoverTypedSignature_v4({
                data: signedData,
                sig: signature
            });
            assert.ok(Utils_1.isSameAddress(relayRequest.request.from.toLowerCase(), rec));
            expect(accountManager._signWithControlledKey).to.have.been.calledWith(keypair, signedData);
            expect(accountManager._signWithProvider).to.have.not.been.called;
        });
        it('should ask provider to sign if key is not controlled', async function () {
            relayRequest.request.from = accounts[0];
            const signedData = new TypedRequestData_1.default(Environments_1.defaultEnvironment.chainId, test_helpers_1.constants.ZERO_ADDRESS, relayRequestWithoutExtraData(relayRequest));
            const signature = await accountManager.sign(relayRequest);
            // @ts-ignore
            const rec = eth_sig_util_1.default.recoverTypedSignature_v4({
                data: signedData,
                sig: signature
            });
            assert.ok(Utils_1.isSameAddress(relayRequest.request.from.toLowerCase(), rec));
            expect(accountManager._signWithProvider).to.have.been.calledWith(signedData);
            expect(accountManager._signWithControlledKey).to.have.not.been.called;
        });
        it('should throw if web3 fails to sign with requested address', async function () {
            relayRequest.request.from = '0x4cfb3f70bf6a80397c2e634e5bdd85bc0bb189ee';
            const promise = accountManager.sign(relayRequest);
            await expect(promise).to.be.eventually.rejectedWith('Failed to sign relayed transaction for 0x4cfb3f70bf6a80397c2e634e5bdd85bc0bb189ee');
        });
    });
});
//# sourceMappingURL=AccountManager.test.js.map