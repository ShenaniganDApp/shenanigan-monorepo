"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const HttpClient_1 = __importDefault(require("../../src/relayclient/HttpClient"));
const HttpWrapper_1 = __importDefault(require("../../src/relayclient/HttpWrapper"));
class BadHttpClient extends HttpClient_1.default {
    constructor(config, failPing, failRelay, timeoutRelay, stubPing, stubRelay) {
        super(new HttpWrapper_1.default(), config);
        this.failPing = failPing;
        this.failRelay = failRelay;
        this.timeoutRelay = timeoutRelay;
        this.stubRelay = stubRelay;
        this.stubPing = stubPing;
    }
    async getPingResponse(relayUrl) {
        if (this.failPing) {
            throw new Error(BadHttpClient.message);
        }
        if (this.stubPing != null) {
            return this.stubPing;
        }
        return await super.getPingResponse(relayUrl);
    }
    async relayTransaction(relayUrl, request) {
        if (this.failRelay) {
            throw new Error(BadHttpClient.message);
        }
        if (this.timeoutRelay) {
            throw new Error('some error describing how timeout occurred somewhere');
        }
        if (this.stubRelay != null) {
            return this.stubRelay;
        }
        return await super.relayTransaction(relayUrl, request);
    }
}
exports.default = BadHttpClient;
BadHttpClient.message = 'This is not the relay you are looking for';
//# sourceMappingURL=BadHttpClient.js.map