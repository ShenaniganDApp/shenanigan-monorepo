import { JsonRpcPayload, JsonRpcResponse } from 'web3-core-helpers';
import { HttpProvider } from 'web3-core';
import { RelayClient } from './RelayClient';
import { GSNConfig, GSNDependencies } from './GSNConfigurator';
import { Transaction } from 'ethereumjs-tx';
import { AccountKeypair } from './AccountManager';
export interface BaseTransactionReceipt {
    logs: any[];
    status: string | boolean;
}
export declare type JsonRpcCallback = (error: Error | null, result?: JsonRpcResponse) => void;
interface ISendAsync {
    sendAsync?: any;
}
export declare class RelayProvider implements HttpProvider {
    protected readonly origProvider: HttpProvider & ISendAsync;
    private readonly origProviderSend;
    protected readonly config: GSNConfig;
    readonly relayClient: RelayClient;
    /**
     * create a proxy provider, to relay transaction
     * @param overrideDependencies
     * @param relayClient
     * @param origProvider - the underlying web3 provider
     * @param gsnConfig
     */
    constructor(origProvider: HttpProvider, gsnConfig: Partial<GSNConfig>, overrideDependencies?: Partial<GSNDependencies>, relayClient?: RelayClient);
    _delegateEventsApi(origProvider: HttpProvider): void;
    send(payload: JsonRpcPayload, callback: JsonRpcCallback): void;
    _ethGetTransactionReceipt(payload: JsonRpcPayload, callback: JsonRpcCallback): void;
    _ethSendTransaction(payload: JsonRpcPayload, callback: JsonRpcCallback): void;
    _convertTransactionToRpcSendResponse(transaction: Transaction, request: JsonRpcPayload): JsonRpcResponse;
    _getTranslatedGsnResponseResult(respResult: BaseTransactionReceipt): BaseTransactionReceipt;
    _useGSN(payload: JsonRpcPayload): boolean;
    private _dumpRelayingResult;
    host: string;
    connected: boolean;
    supportsSubscriptions(): boolean;
    disconnect(): boolean;
    newAccount(): AccountKeypair;
    addAccount(keypair: AccountKeypair): void;
    _getAccounts(payload: JsonRpcPayload, callback: JsonRpcCallback): void;
}
export {};
