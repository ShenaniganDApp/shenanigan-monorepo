"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Environments_1 = require("../common/Environments");
const HttpClient_1 = __importDefault(require("./HttpClient"));
const ContractInteractor_1 = __importDefault(require("./ContractInteractor"));
const KnownRelaysManager_1 = __importStar(require("./KnownRelaysManager"));
const AccountManager_1 = __importDefault(require("./AccountManager"));
const RelayedTransactionValidator_1 = __importDefault(require("./RelayedTransactionValidator"));
const HttpWrapper_1 = __importDefault(require("./HttpWrapper"));
const RelayClient_1 = require("./RelayClient");
const Constants_1 = require("../common/Constants");
const GAS_PRICE_PERCENT = 20;
const MAX_RELAY_NONCE_GAP = 3;
const DEFAULT_RELAY_TIMEOUT_GRACE_SEC = 1800;
const defaultGsnConfig = {
    preferredRelays: [],
    relayLookupWindowBlocks: 6000,
    gasPriceFactorPercent: GAS_PRICE_PERCENT,
    minGasPrice: 0,
    maxRelayNonceGap: MAX_RELAY_NONCE_GAP,
    sliceSize: 3,
    relayTimeoutGrace: DEFAULT_RELAY_TIMEOUT_GRACE_SEC,
    methodSuffix: '',
    jsonStringifyRequest: false,
    chainId: Environments_1.defaultEnvironment.chainId,
    relayHubAddress: Constants_1.constants.ZERO_ADDRESS,
    stakeManagerAddress: Constants_1.constants.ZERO_ADDRESS,
    paymasterAddress: Constants_1.constants.ZERO_ADDRESS,
    forwarderAddress: Constants_1.constants.ZERO_ADDRESS,
    verbose: false,
    clientId: '1'
};
/**
 * All classes in GSN must be configured correctly with non-null values.
 * Yet it is tedious to provide default values to all configuration fields on new instance creation.
 * This helper allows users to provide only the overrides and the remainder of values will be set automatically.
 */
function configureGSN(partialConfig) {
    return Object.assign({}, defaultGsnConfig, partialConfig);
}
exports.configureGSN = configureGSN;
function getDependencies(config, provider, overrideDependencies) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    let contractInteractor = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.contractInteractor;
    if (contractInteractor == null) {
        if (provider != null) {
            contractInteractor = new ContractInteractor_1.default(provider, config);
        }
        else {
            throw new Error('either contract interactor or web3 provider must be non-null');
        }
    }
    let accountManager = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.accountManager;
    if (accountManager == null) {
        if (provider != null) {
            accountManager = new AccountManager_1.default(provider, (_a = config.chainId) !== null && _a !== void 0 ? _a : contractInteractor.getChainId(), config);
        }
        else {
            throw new Error('either account manager or web3 provider must be non-null');
        }
    }
    const httpClient = (_b = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.httpClient) !== null && _b !== void 0 ? _b : new HttpClient_1.default(new HttpWrapper_1.default(), config);
    const pingFilter = (_c = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.pingFilter) !== null && _c !== void 0 ? _c : RelayClient_1.GasPricePingFilter;
    const relayFilter = (_d = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.relayFilter) !== null && _d !== void 0 ? _d : KnownRelaysManager_1.EmptyFilter;
    const asyncApprovalData = (_e = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.asyncApprovalData) !== null && _e !== void 0 ? _e : RelayClient_1.EmptyDataCallback;
    const asyncPaymasterData = (_f = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.asyncPaymasterData) !== null && _f !== void 0 ? _f : RelayClient_1.EmptyDataCallback;
    const scoreCalculator = (_g = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.scoreCalculator) !== null && _g !== void 0 ? _g : KnownRelaysManager_1.DefaultRelayScore;
    const knownRelaysManager = (_h = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.knownRelaysManager) !== null && _h !== void 0 ? _h : new KnownRelaysManager_1.default(contractInteractor, config, relayFilter);
    const transactionValidator = (_j = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.transactionValidator) !== null && _j !== void 0 ? _j : new RelayedTransactionValidator_1.default(contractInteractor, config);
    const ret = {
        httpClient,
        contractInteractor,
        knownRelaysManager,
        accountManager,
        transactionValidator,
        pingFilter,
        relayFilter,
        asyncApprovalData,
        asyncPaymasterData,
        scoreCalculator,
        config
    };
    // sanity check: overrides must not contain unknown fields.
    for (const key in overrideDependencies) {
        if (ret[key] == null) {
            throw new Error(`Unexpected override key ${key}`);
        }
    }
    return ret;
}
exports.getDependencies = getDependencies;
//# sourceMappingURL=GSNConfigurator.js.map