import { Address, AsyncScoreCalculator, RelayFilter } from './types/Aliases';
import RelayFailureInfo from './types/RelayFailureInfo';
import ContractInteractor from './ContractInteractor';
import { GSNConfig } from './GSNConfigurator';
import GsnTransactionDetails from './types/GsnTransactionDetails';
import { RelayInfoUrl, RelayRegisteredEventInfo } from './types/RelayRegisteredEventInfo';
export declare const EmptyFilter: RelayFilter;
/**
 * Basic score is reversed transaction fee, higher is better.
 * Relays that failed to respond recently will be downgraded for some period of time.
 */
export declare const DefaultRelayScore: (relay: RelayRegisteredEventInfo, txDetails: GsnTransactionDetails, failures: RelayFailureInfo[]) => Promise<number>;
export interface IKnownRelaysManager {
    refresh: () => Promise<void>;
    saveRelayFailure: (lastErrorTime: number, relayManager: Address, relayUrl: string) => void;
    getRelaysSortedForTransaction: (gsnTransactionDetails: GsnTransactionDetails) => Promise<RelayInfoUrl[][]>;
    getRelayInfoForManagers: (relayManagers: Set<Address>) => Promise<RelayRegisteredEventInfo[]>;
}
export default class KnownRelaysManager implements IKnownRelaysManager {
    private readonly contractInteractor;
    private readonly config;
    private readonly relayFilter;
    private readonly scoreCalculator;
    private latestScannedBlock;
    private relayFailures;
    readonly knownRelays: RelayInfoUrl[][];
    constructor(contractInteractor: ContractInteractor, config: GSNConfig, relayFilter?: RelayFilter, scoreCalculator?: AsyncScoreCalculator);
    refresh(): Promise<void>;
    getRelayInfoForManagers(relayManagers: Set<Address>): Promise<RelayRegisteredEventInfo[]>;
    _fetchRecentlyActiveRelayManagers(): Promise<Set<Address>>;
    _refreshFailures(): void;
    getRelaysSortedForTransaction(gsnTransactionDetails: GsnTransactionDetails): Promise<RelayInfoUrl[][]>;
    _sortRelaysInternal(gsnTransactionDetails: GsnTransactionDetails, activeRelays: RelayInfoUrl[]): Promise<RelayInfoUrl[]>;
    saveRelayFailure(lastErrorTime: number, relayManager: Address, relayUrl: string): void;
}
