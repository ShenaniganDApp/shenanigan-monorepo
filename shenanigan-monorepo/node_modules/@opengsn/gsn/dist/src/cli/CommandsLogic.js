"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_1 = __importDefault(require("web3"));
const hdwallet_provider_1 = __importDefault(require("@truffle/hdwallet-provider"));
const bn_js_1 = __importDefault(require("bn.js"));
const lodash_1 = require("lodash");
const Utils_1 = require("../common/Utils");
// compiled folder populated by "prepublish"
const StakeManager_json_1 = __importDefault(require("./compiled/StakeManager.json"));
const RelayHub_json_1 = __importDefault(require("./compiled/RelayHub.json"));
const Penalizer_json_1 = __importDefault(require("./compiled/Penalizer.json"));
const TestPaymasterEverythingAccepted_json_1 = __importDefault(require("./compiled/TestPaymasterEverythingAccepted.json"));
const Forwarder_json_1 = __importDefault(require("./compiled/Forwarder.json"));
const Aliases_1 = require("../relayclient/types/Aliases");
const ContractInteractor_1 = __importDefault(require("../relayclient/ContractInteractor"));
const HttpClient_1 = __importDefault(require("../relayclient/HttpClient"));
const HttpWrapper_1 = __importDefault(require("../relayclient/HttpWrapper"));
const TypedRequestData_1 = require("../common/EIP712/TypedRequestData");
const Constants_1 = require("../common/Constants");
class CommandsLogic {
    constructor(host, config, mnemonic) {
        let provider = new web3_1.default.providers.HttpProvider(host);
        if (mnemonic != null) {
            // web3 defines provider type quite narrowly
            provider = new hdwallet_provider_1.default(mnemonic, provider);
        }
        this.contractInteractor = new ContractInteractor_1.default(provider, config);
        this.httpClient = new HttpClient_1.default(new HttpWrapper_1.default(), config);
        this.config = config;
        this.web3 = new web3_1.default(provider);
    }
    async findWealthyAccount(requiredBalance = Utils_1.ether('2')) {
        try {
            const accounts = await this.web3.eth.getAccounts();
            for (const account of accounts) {
                const balance = new bn_js_1.default(await this.web3.eth.getBalance(account));
                if (balance.gte(requiredBalance)) {
                    return account;
                }
            }
        }
        catch (error) {
            console.error('Failed to retrieve accounts and balances:', error);
        }
    }
    async isRelayReady(relayUrl) {
        const response = await this.httpClient.getPingResponse(relayUrl);
        return response.Ready;
    }
    async waitForRelay(relayUrl) {
        const timeout = 30;
        console.error(`Will wait up to ${timeout}s for the relay to be ready`);
        for (let i = 0; i < timeout; ++i) {
            let isReady = false;
            try {
                isReady = await this.isRelayReady(relayUrl);
            }
            catch (e) {
                console.log(e);
            }
            if (isReady) {
                return;
            }
            await Utils_1.sleep(1000);
        }
        throw Error(`Relay not ready after ${timeout}s`);
    }
    async getPaymasterBalance(paymaster) {
        const relayHub = await this.contractInteractor._createRelayHub(this.config.relayHubAddress);
        return await relayHub.balanceOf(paymaster);
    }
    /**
     * Send enough ether from the {@param from} to the RelayHub to make {@param paymaster}'s gas deposit exactly {@param amount}.
     * Does nothing if current paymaster balance exceeds amount.
     * @param from
     * @param paymaster
     * @param amount
     * @return deposit of the paymaster after
     */
    async fundPaymaster(from, paymaster, amount) {
        const relayHub = await this.contractInteractor._createRelayHub(this.config.relayHubAddress);
        const targetAmount = new bn_js_1.default(amount);
        const currentBalance = await relayHub.balanceOf(paymaster);
        if (currentBalance.lt(targetAmount)) {
            const value = targetAmount.sub(currentBalance);
            await relayHub.depositFor(paymaster, {
                value,
                from
            });
            return targetAmount;
        }
        else {
            return currentBalance;
        }
    }
    async registerRelay(options) {
        try {
            if (await this.isRelayReady(options.relayUrl)) {
                return {
                    success: false,
                    error: 'Already registered'
                };
            }
        }
        catch (error) {
            return {
                success: false,
                error: `Could not reach the relay at ${options.relayUrl}, is it running?`
            };
        }
        let stakeTx;
        let authorizeTx;
        let fundTx;
        try {
            console.error(`Funding GSN relay at ${options.relayUrl}`);
            const response = await this.httpClient.getPingResponse(options.relayUrl);
            const relayAddress = response.RelayManagerAddress;
            const relayHub = await this.contractInteractor._createRelayHub(this.config.relayHubAddress);
            const stakeManagerAddress = await relayHub.stakeManager();
            const stakeManager = await this.contractInteractor._createStakeManager(stakeManagerAddress);
            stakeTx = await stakeManager
                .stakeForAddress(relayAddress, options.unstakeDelay.toString(), {
                value: options.stake,
                from: options.from,
                gas: 1e6,
                gasPrice: 1e9
            });
            authorizeTx = await stakeManager
                .authorizeHubByOwner(relayAddress, this.config.relayHubAddress, {
                from: options.from,
                gas: 1e6,
                gasPrice: 1e9
            });
            const _fundTx = await this.web3.eth.sendTransaction({
                from: options.from,
                to: relayAddress,
                value: options.funds,
                gas: 1e6,
                gasPrice: 1e9
            });
            fundTx = _fundTx;
            if (fundTx.transactionHash == null) {
                return {
                    success: false,
                    error: `Fund transaction reverted: ${JSON.stringify(_fundTx)}`
                };
            }
            await this.waitForRelay(options.relayUrl);
            return {
                success: true,
                transactions: [stakeTx.tx, authorizeTx.tx, fundTx.transactionHash]
            };
        }
        catch (error) {
            return {
                success: false,
                transactions: [stakeTx === null || stakeTx === void 0 ? void 0 : stakeTx.tx, authorizeTx === null || authorizeTx === void 0 ? void 0 : authorizeTx.tx, fundTx === null || fundTx === void 0 ? void 0 : fundTx.transactionHash].filter(Aliases_1.notNull),
                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                error: `Failed to fund relay: '${error}'`
            };
        }
    }
    contract(file, address) {
        return new this.web3.eth.Contract(file.abi, address, { data: file.bytecode });
    }
    async deployGsnContracts(deployOptions) {
        var _a, _b;
        const options = {
            from: deployOptions.from,
            gas: (_a = deployOptions.gasLimit) !== null && _a !== void 0 ? _a : 3e6,
            gasPrice: (_b = deployOptions.gasPrice) !== null && _b !== void 0 ? _b : (1e9).toString()
        };
        const sInstance = await this.contract(StakeManager_json_1.default).deploy({}).send(options);
        const pInstance = await this.contract(Penalizer_json_1.default).deploy({}).send(options);
        let fInstance;
        if (deployOptions.forwarderAddress == null) {
            fInstance = await this.contract(Forwarder_json_1.default).deploy({}).send(lodash_1.merge(options, { gas: 5e6 }));
        }
        else {
            fInstance = this.contract(Forwarder_json_1.default, deployOptions.forwarderAddress);
        }
        const rInstance = await this.contract(RelayHub_json_1.default).deploy({
            arguments: [
                sInstance.options.address,
                pInstance.options.address,
                deployOptions.relayHubConfiguration.maxWorkerCount,
                deployOptions.relayHubConfiguration.gasReserve,
                deployOptions.relayHubConfiguration.postOverhead,
                deployOptions.relayHubConfiguration.gasOverhead,
                deployOptions.relayHubConfiguration.maximumRecipientDeposit,
                deployOptions.relayHubConfiguration.minimumUnstakeDelay,
                deployOptions.relayHubConfiguration.minimumStake
            ]
        }).send(lodash_1.merge(options, { gas: 5e6 }));
        let paymasterAddress = Constants_1.constants.ZERO_ADDRESS;
        if (deployOptions.deployPaymaster === true) {
            const pmInstance = await this.deployPaymaster(options, rInstance.options.address, deployOptions.from, fInstance);
            paymasterAddress = pmInstance.options.address;
            // Overriding saved configuration with newly deployed instances
            this.config.paymasterAddress = paymasterAddress;
        }
        this.config.stakeManagerAddress = sInstance.options.address;
        this.config.relayHubAddress = rInstance.options.address;
        await fInstance.methods.registerRequestType(TypedRequestData_1.GsnRequestType.typeName, TypedRequestData_1.GsnRequestType.typeSuffix).send(options);
        return {
            relayHubAddress: rInstance.options.address,
            stakeManagerAddress: sInstance.options.address,
            penalizerAddress: pInstance.options.address,
            forwarderAddress: fInstance.options.address,
            naivePaymasterAddress: paymasterAddress
        };
    }
    async deployPaymaster(options, hub, from, fInstance) {
        const pmInstance = await this.contract(TestPaymasterEverythingAccepted_json_1.default).deploy({}).send(options);
        await pmInstance.methods.setRelayHub(hub).send(options);
        await pmInstance.methods.setTrustedForwarder(fInstance.options.address).send(options);
        return pmInstance;
    }
}
exports.default = CommandsLogic;
//# sourceMappingURL=CommandsLogic.js.map