"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Utils_1 = require("../../common/Utils");
const CommandsLogic_1 = __importDefault(require("../CommandsLogic"));
const GSNConfigurator_1 = require("../../relayclient/GSNConfigurator");
const utils_1 = require("../utils");
const commander = utils_1.gsnCommander(['n', 'f', 'h', 'm'])
    .option('--relayUrl <url>', 'url to advertise the relayer (defaults to localhost:8090)')
    .option('--stake <stake>', 'amount to stake for the relayer, in wei (defaults to 1 Ether)')
    .option('--unstakeDelay <delay>', 'blocks to wait between unregistering and withdrawing the stake (defaults to one 1000)')
    .option('--funds <funds>', 'amount to transfer to the relayer to pay for relayed transactions, in wei (defaults to 2 Ether)')
    .parse(process.argv);
(async () => {
    var _a, _b, _c, _d, _e;
    const host = utils_1.getNetworkUrl(commander.network);
    const hub = utils_1.getRelayHubAddress(commander.hub);
    const mnemonic = utils_1.getMnemonic(commander.mnemonic);
    const logic = new CommandsLogic_1.default(host, GSNConfigurator_1.configureGSN({ relayHubAddress: hub }), mnemonic);
    const registerOptions = {
        hub,
        from: (_a = commander.from) !== null && _a !== void 0 ? _a : await logic.findWealthyAccount(),
        stake: (_b = commander.stake) !== null && _b !== void 0 ? _b : Utils_1.ether('1'),
        funds: (_c = commander.funds) !== null && _c !== void 0 ? _c : Utils_1.ether('2'),
        relayUrl: (_d = commander.relayUrl) !== null && _d !== void 0 ? _d : 'http://localhost:8090',
        unstakeDelay: (_e = commander.unstakeDelay) !== null && _e !== void 0 ? _e : 1000
    };
    const result = await logic.registerRelay(registerOptions);
    if (result.success) {
        console.log('Relay registered successfully! Transactions:\n', result.transactions);
    }
    else {
        console.error('Failed to register relay:', result.error);
        process.exit(1);
    }
})().catch(reason => {
    console.error(reason);
    process.exit(1);
});
//# sourceMappingURL=gsn-relayer-register.js.map