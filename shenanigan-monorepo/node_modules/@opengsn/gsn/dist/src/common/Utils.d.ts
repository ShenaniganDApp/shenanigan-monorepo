/// <reference types="@openeth/truffle-typings" />
import TypedRequestData from './EIP712/TypedRequestData';
import { PrefixedHexString } from 'ethereumjs-tx';
import { Address } from '../relayclient/types/Aliases';
import BN from 'bn.js';
export declare function removeHexPrefix(hex: string): string;
export declare function padTo64(hex: string): string;
export declare function event2topic(contract: any, names: any): any;
export declare function getEip712Signature(web3: Web3, typedRequestData: TypedRequestData, methodSuffix?: string, jsonStringifyRequest?: boolean): Promise<PrefixedHexString>;
/**
 * @returns maximum possible gas consumption by this relayed call
 */
export declare function calculateTransactionMaxPossibleGas({ gasLimits, hubOverhead, relayCallGasLimit }: TransactionGasComponents): number;
export declare function getEcRecoverMeta(message: PrefixedHexString, signature: string | Signature): PrefixedHexString;
export declare function parseHexString(str: string): number[];
export declare function isSameAddress(address1: Address, address2: Address): boolean;
export declare function sleep(ms: number): Promise<void>;
export declare function ether(n: string): BN;
/**
 * @param gasLimits
 * @param hubOverhead
 * @param relayCallGasLimit
 * @param calldataSize
 * @param gtxdatanonzero
 */
interface TransactionGasComponents {
    gasLimits: PaymasterGasLimits;
    hubOverhead: number;
    relayCallGasLimit: string;
}
interface PaymasterGasLimits {
    acceptRelayedCallGasLimit: string;
    preRelayedCallGasLimit: string;
    postRelayedCallGasLimit: string;
}
interface Signature {
    v: number[];
    r: number[];
    s: number[];
}
export {};
