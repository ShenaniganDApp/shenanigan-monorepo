"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
Object.defineProperty(exports, "__esModule", { value: true });
// TODO: convert to 'commander' format
const fs_1 = __importDefault(require("fs"));
const minimist_1 = __importDefault(require("minimist"));
const web3_1 = __importDefault(require("web3"));
const HttpServer_1 = require("./HttpServer");
const RelayServer_1 = require("./RelayServer");
const KeyManager_1 = require("./KeyManager");
const TxStoreManager_1 = require("./TxStoreManager");
const utils_1 = require("../cli/utils");
const ContractInteractor_1 = __importDefault(require("../relayclient/ContractInteractor"));
const GSNConfigurator_1 = require("../relayclient/GSNConfigurator");
function error(err) {
    console.error(err);
    process.exit(1);
}
// use all camel-case entries from environment as defaults.
const envDefaults = Object.entries(process.env)
    .filter(([k]) => /^[a-z][A-Za-z]*$/.test(k))
    .reduce((obj, [k, v]) => (Object.assign(Object.assign({}, obj), { [k]: v })), {});
const argv = minimist_1.default(process.argv.slice(2), {
    string: [
        'config',
        'baseRelayFee',
        'pctRelayFee',
        'url',
        'port',
        'relayHubAddress',
        'gasPricePercent',
        'ethereumNodeUrl',
        'workdir'
    ],
    boolean: ['devMode', 'debug'],
    alias: {},
    default: envDefaults
});
if (argv._.length > 0)
    error(`unknown extra params: ${argv._.toString()}`);
console.log('runServer start. args', argv);
let config = {};
if (argv.config != null && fs_1.default.existsSync(argv.config)) {
    config = JSON.parse(fs_1.default.readFileSync(argv.config, 'utf8'));
}
const baseRelayFee = (_c = (_a = argv.baseRelayFee) !== null && _a !== void 0 ? _a : (_b = config.baseRelayFee) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : error('missing --baseRelayFee');
const pctRelayFee = (_f = (_d = argv.pctRelayFee) !== null && _d !== void 0 ? _d : (_e = config.pctRelayFee) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : error('missing --pctRelayFee');
const url = (_h = (_g = argv.url) !== null && _g !== void 0 ? _g : config.url) !== null && _h !== void 0 ? _h : error('missing --url');
const port = (_l = (_j = argv.port) !== null && _j !== void 0 ? _j : (_k = config.port) === null || _k === void 0 ? void 0 : _k.toString()) !== null && _l !== void 0 ? _l : error('missing --port');
const relayHubAddress = (_o = (_m = utils_1.getRelayHubAddress(argv.relayHubAddress)) !== null && _m !== void 0 ? _m : config.relayHubAddress) !== null && _o !== void 0 ? _o : error('missing --relayHubAddress');
const gasPricePercent = (_r = (_p = argv.gasPricePercent) !== null && _p !== void 0 ? _p : (_q = config.gasPricePercent) === null || _q === void 0 ? void 0 : _q.toString()) !== null && _r !== void 0 ? _r : error('missing --gasPricePercent');
const ethereumNodeUrl = (_t = (_s = argv.ethereumNodeUrl) !== null && _s !== void 0 ? _s : config.ethereumNodeUrl) !== null && _t !== void 0 ? _t : error('missing --ethereumNodeUrl');
const workdir = (_v = (_u = argv.workdir) !== null && _u !== void 0 ? _u : config.workdir) !== null && _v !== void 0 ? _v : error('missing --workdir');
const devMode = (_x = (_w = argv.devMode) !== null && _w !== void 0 ? _w : config.devMode) !== null && _x !== void 0 ? _x : error('missing --devMode');
const debug = (_z = (_y = argv.debug) !== null && _y !== void 0 ? _y : config.debug) !== null && _z !== void 0 ? _z : error('missing --debug');
if (devMode) {
    if (fs_1.default.existsSync(`${workdir}/${TxStoreManager_1.TXSTORE_FILENAME}`)) {
        fs_1.default.unlinkSync(`${workdir}/${TxStoreManager_1.TXSTORE_FILENAME}`);
    }
}
const managerKeyManager = new KeyManager_1.KeyManager(1, workdir + '/manager');
const workersKeyManager = new KeyManager_1.KeyManager(1, workdir + '/workers');
const txStoreManager = new TxStoreManager_1.TxStoreManager({ workdir });
const web3provider = new web3_1.default.providers.HttpProvider(ethereumNodeUrl);
const interactor = new ContractInteractor_1.default(web3provider, GSNConfigurator_1.configureGSN({}));
const gasPriceFactor = (parseInt(gasPricePercent) + 100) / 100;
const params = {
    txStoreManager,
    managerKeyManager,
    workersKeyManager,
    hubAddress: relayHubAddress,
    contractInteractor: interactor,
    url,
    baseRelayFee: parseInt(baseRelayFee),
    pctRelayFee: parseInt(pctRelayFee),
    devMode,
    debug: debug,
    gasPriceFactor: gasPriceFactor
};
const relay = new RelayServer_1.RelayServer(params);
console.log('Starting server.');
console.log(`server params:\nhub address: ${relayHubAddress} url: ${url} baseRelayFee: ${baseRelayFee} pctRelayFee: ${pctRelayFee} `);
const httpServer = new HttpServer_1.HttpServer(parseInt(port), relay);
httpServer.start();
//# sourceMappingURL=runServer.js.map