/// <reference types="node" />
import { PrefixedHexString, Transaction } from 'ethereumjs-tx';
interface StoredParams {
    from: Buffer;
    to: Buffer;
    gas: Buffer;
    gasPrice: Buffer;
    data: Buffer;
    nonce: Buffer;
    txId: string;
    attempts: number;
}
export declare class StoredTx {
    readonly from: PrefixedHexString;
    readonly to: PrefixedHexString;
    readonly gas: number;
    readonly gasPrice: number;
    readonly data: PrefixedHexString;
    readonly nonce: number;
    readonly txId: PrefixedHexString;
    readonly attempts: number;
    constructor(params: StoredParams);
}
export declare function transactionToStoredTx(tx: Transaction, from: PrefixedHexString, chainId: number, attempts: number): StoredTx;
export declare function storedTxToTransaction(stx: StoredTx): Transaction;
export declare const TXSTORE_FILENAME = "txstore.db";
export declare class TxStoreManager {
    private readonly txstore;
    constructor({ workdir, inMemory }: {
        workdir?: string | undefined;
        inMemory?: boolean | undefined;
    });
    putTx(tx: any, updateExisting?: boolean): Promise<void>;
    getTxByNonce(signer: PrefixedHexString, nonce: number): Promise<any>;
    getTxById(txId: string): Promise<any>;
    removeTxByNonce(signer: PrefixedHexString, nonce: number): Promise<unknown>;
    removeTxsUntilNonce(signer: PrefixedHexString, nonce: number): Promise<unknown>;
    clearAll(): Promise<void>;
    getAllBySigner(signer: PrefixedHexString): Promise<any[]>;
    getAll(): Promise<any[]>;
}
export {};
