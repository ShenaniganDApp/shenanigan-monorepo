"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asyncLib = require('async');
const Tree = require('functional-red-black-tree');
const ethereumjs_account_1 = require("ethereumjs-account");
/**
 * @ignore
 */
class Cache {
    constructor(trie) {
        this._cache = Tree();
        this._checkpoints = [];
        this._trie = trie;
    }
    /**
     * Puts account to cache under its address.
     * @param key - Address of account
     * @param val - Account
     */
    put(key, val, fromTrie = false) {
        const modified = !fromTrie;
        this._update(key, val, modified, false);
    }
    /**
     * Returns the queried account or an empty account.
     * @param key - Address of account
     */
    get(key) {
        let account = this.lookup(key);
        if (!account) {
            account = new ethereumjs_account_1.default();
        }
        return account;
    }
    /**
     * Returns the queried account or undefined.
     * @param key - Address of account
     */
    lookup(key) {
        const keyStr = key.toString('hex');
        const it = this._cache.find(keyStr);
        if (it.node) {
            const account = new ethereumjs_account_1.default(it.value.val);
            return account;
        }
    }
    /**
     * Looks up address in underlying trie.
     * @param address - Address of account
     * @param cb - Callback with params (err, account)
     */
    _lookupAccount(address, cb) {
        this._trie.get(address, (err, raw) => {
            if (err)
                return cb(err);
            var account = new ethereumjs_account_1.default(raw);
            cb(null, account);
        });
    }
    /**
     * Looks up address in cache, if not found, looks it up
     * in the underlying trie.
     * @param key - Address of account
     * @param cb - Callback with params (err, account)
     */
    getOrLoad(key, cb) {
        const account = this.lookup(key);
        if (account) {
            asyncLib.nextTick(cb, null, account);
        }
        else {
            this._lookupAccount(key, (err, account) => {
                if (err)
                    return cb(err);
                this._update(key, account, false, false);
                cb(null, account);
            });
        }
    }
    /**
     * Warms cache by loading their respective account from trie
     * and putting them in cache.
     * @param addresses - Array of addresses
     * @param cb - Callback
     */
    warm(addresses, cb) {
        // shim till async supports iterators
        const accountArr = [];
        addresses.forEach(val => {
            if (val)
                accountArr.push(val);
        });
        asyncLib.eachSeries(accountArr, (addressHex, done) => {
            var address = Buffer.from(addressHex, 'hex');
            this._lookupAccount(address, (err, account) => {
                if (err)
                    return done(err);
                this._update(address, account, false, false);
                done();
            });
        }, cb);
    }
    /**
     * Flushes cache by updating accounts that have been modified
     * and removing accounts that have been deleted.
     * @param cb - Callback
     */
    flush(cb) {
        const it = this._cache.begin;
        let next = true;
        asyncLib.whilst(() => next, (done) => {
            if (it.value && it.value.modified) {
                it.value.modified = false;
                it.value.val = it.value.val.serialize();
                this._trie.put(Buffer.from(it.key, 'hex'), it.value.val, (err) => {
                    if (err)
                        return done(err);
                    next = it.hasNext;
                    it.next();
                    done();
                });
            }
            else if (it.value && it.value.deleted) {
                it.value.modified = false;
                it.value.deleted = false;
                it.value.val = new ethereumjs_account_1.default().serialize();
                this._trie.del(Buffer.from(it.key, 'hex'), (err) => {
                    if (err)
                        return done(err);
                    next = it.hasNext;
                    it.next();
                    done();
                });
            }
            else {
                next = it.hasNext;
                it.next();
                asyncLib.nextTick(done);
            }
        }, cb);
    }
    /**
     * Marks current state of cache as checkpoint, which can
     * later on be reverted or commited.
     */
    checkpoint() {
        this._checkpoints.push(this._cache);
    }
    /**
     * Revert changes to cache last checkpoint (no effect on trie).
     */
    revert() {
        this._cache = this._checkpoints.pop();
    }
    /**
     * Commits to current state of cache (no effect on trie).
     */
    commit() {
        this._checkpoints.pop();
    }
    /**
     * Clears cache.
     */
    clear() {
        this._cache = Tree();
    }
    /**
     * Marks address as deleted in cache.
     * @param key - Address
     */
    del(key) {
        this._update(key, new ethereumjs_account_1.default(), false, true);
    }
    _update(key, val, modified, deleted) {
        const keyHex = key.toString('hex');
        const it = this._cache.find(keyHex);
        if (it.node) {
            this._cache = it.update({
                val: val,
                modified: modified,
                deleted: deleted,
            });
        }
        else {
            this._cache = this._cache.insert(keyHex, {
                val: val,
                modified: modified,
                deleted: deleted,
            });
        }
    }
}
exports.default = Cache;
//# sourceMappingURL=cache.js.map