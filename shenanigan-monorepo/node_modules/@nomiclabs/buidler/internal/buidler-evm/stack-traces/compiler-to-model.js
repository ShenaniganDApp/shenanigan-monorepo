"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereumjs_abi_1 = __importDefault(require("ethereumjs-abi"));
const library_utils_1 = require("./library-utils");
const model_1 = require("./model");
const source_maps_1 = require("./source-maps");
function createModelsAndDecodeBytecodes(solcVersion, compilerInput, compilerOutput) {
    const fileIdToSourceFile = new Map();
    const contractIdToContract = new Map();
    createSourcesModelFromAst(compilerOutput, compilerInput, fileIdToSourceFile, contractIdToContract);
    const bytecodes = decodeBytecodes(solcVersion, compilerOutput, fileIdToSourceFile, contractIdToContract);
    correctSelectors(bytecodes, compilerOutput);
    return bytecodes;
}
exports.createModelsAndDecodeBytecodes = createModelsAndDecodeBytecodes;
function createSourcesModelFromAst(compilerOutput, compilerInput, fileIdToSourceFile, contractIdToContract) {
    const contractIdToLinearizedBaseContractIds = new Map();
    for (const [globalName, source] of Object.entries(compilerOutput.sources)) {
        const file = new model_1.SourceFile(globalName, compilerInput.sources[globalName].content);
        fileIdToSourceFile.set(source.id, file);
        for (const contractNode of source.ast.nodes) {
            if (contractNode.nodeType !== "ContractDefinition") {
                continue;
            }
            const contractType = contractKindToContractType(contractNode.contractKind);
            if (contractType === undefined) {
                continue;
            }
            processContractAstNode(file, contractNode, fileIdToSourceFile, contractType, contractIdToContract, contractIdToLinearizedBaseContractIds);
        }
    }
    applyContractsInheritance(contractIdToContract, contractIdToLinearizedBaseContractIds);
}
function processContractAstNode(file, contractNode, fileIdToSourceFile, contractType, contractIdToContract, contractIdToLinearizedBaseContractIds) {
    const contractLocation = astSrcToSourceLocation(contractNode.src, fileIdToSourceFile);
    const contract = new model_1.Contract(contractNode.name, contractType, contractLocation);
    contractIdToContract.set(contractNode.id, contract);
    contractIdToLinearizedBaseContractIds.set(contractNode.id, contractNode.linearizedBaseContracts);
    file.addContract(contract);
    for (const node of contractNode.nodes) {
        if (node.nodeType === "FunctionDefinition") {
            processFunctionDefinitionAstNode(node, fileIdToSourceFile, contract, file);
        }
        else if (node.nodeType === "ModifierDefinition") {
            processModifierDefinitionAstNode(node, fileIdToSourceFile, contract, file);
        }
        else if (node.nodeType === "VariableDeclaration") {
            processVariableDeclarationAstNode(node, fileIdToSourceFile, contract, file);
        }
    }
}
function processFunctionDefinitionAstNode(functionDefinitionNode, fileIdToSourceFile, contract, file) {
    if (functionDefinitionNode.implemented === false) {
        return;
    }
    const functionType = functionDefinitionKindToFunctionType(functionDefinitionNode.kind);
    const functionLocation = astSrcToSourceLocation(functionDefinitionNode.src, fileIdToSourceFile);
    const visibility = astVisibilityToVisibility(functionDefinitionNode.visibility);
    const cf = new model_1.ContractFunction(functionDefinitionNode.name, functionType, functionLocation, contract, visibility, functionDefinitionNode.stateMutability === "payable", functionType === model_1.ContractFunctionType.FUNCTION
        ? astFunctionDefinitionToSelector(functionDefinitionNode)
        : undefined);
    contract.addLocalFunction(cf);
    file.addFunction(cf);
}
function processModifierDefinitionAstNode(modifierDefinitionNode, fileIdToSourceFile, contract, file) {
    const functionLocation = astSrcToSourceLocation(modifierDefinitionNode.src, fileIdToSourceFile);
    const cf = new model_1.ContractFunction(modifierDefinitionNode.name, model_1.ContractFunctionType.MODIFIER, functionLocation, contract);
    contract.addLocalFunction(cf);
    file.addFunction(cf);
}
function getPublicVariableSelectorFromDeclarationAstNode(variableDeclaration) {
    const paramTypes = [];
    let nextType = variableDeclaration.typeName;
    while (true) {
        if (nextType.nodeType === "Mapping") {
            paramTypes.push(toCanonicalAbiType(nextType.keyType.name));
            nextType = nextType.valueType;
        }
        else {
            if (nextType.nodeType === "ArrayTypeName") {
                paramTypes.push("uint256");
            }
            break;
        }
    }
    return ethereumjs_abi_1.default.methodID(variableDeclaration.name, paramTypes);
}
function processVariableDeclarationAstNode(variableDeclarationNode, fileIdToSourceFile, contract, file) {
    const visibility = astVisibilityToVisibility(variableDeclarationNode.visibility);
    // Variables can't be external
    if (visibility !== model_1.ContractFunctionVisibility.PUBLIC) {
        return;
    }
    const functionLocation = astSrcToSourceLocation(variableDeclarationNode.src, fileIdToSourceFile);
    const cf = new model_1.ContractFunction(variableDeclarationNode.name, model_1.ContractFunctionType.GETTER, functionLocation, contract, visibility, false, // Getters aren't payable
    getPublicVariableSelectorFromDeclarationAstNode(variableDeclarationNode));
    contract.addLocalFunction(cf);
    file.addFunction(cf);
}
function applyContractsInheritance(contractIdToContract, contractIdToLinearizedBaseContractIds) {
    for (const [cid, contract] of contractIdToContract.entries()) {
        const inheritanceIds = contractIdToLinearizedBaseContractIds.get(cid);
        for (const baseId of inheritanceIds) {
            const baseContract = contractIdToContract.get(baseId);
            if (baseContract === undefined) {
                // This list includes interface, which we don't model
                continue;
            }
            contract.addNextLinearizedBaseContract(baseContract);
        }
    }
}
function decodeBytecodes(solcVersion, compilerOutput, fileIdToSourceFile, contractIdToContract) {
    const bytecodes = [];
    for (const contract of contractIdToContract.values()) {
        const contractFile = contract.location.file.globalName;
        const contractEvmOutput = compilerOutput.contracts[contractFile][contract.name].evm;
        // This is an abstract contract
        if (contractEvmOutput.bytecode.object === "") {
            continue;
        }
        const deploymentBytecode = decodeEvmBytecode(contract, solcVersion, true, contractEvmOutput.bytecode, fileIdToSourceFile);
        const runtimeBytecode = decodeEvmBytecode(contract, solcVersion, false, contractEvmOutput.deployedBytecode, fileIdToSourceFile);
        bytecodes.push(deploymentBytecode);
        bytecodes.push(runtimeBytecode);
    }
    return bytecodes;
}
function decodeEvmBytecode(contract, solcVersion, isDeployment, compilerBytecode, fileIdToSourceFile) {
    const libraryAddressPositions = library_utils_1.getLibraryAddressPositions(compilerBytecode);
    const immutableReferences = compilerBytecode.immutableReferences !== undefined
        ? Object.values(compilerBytecode.immutableReferences).reduce((previousValue, currentValue) => [...previousValue, ...currentValue], [])
        : [];
    const normalizedCode = library_utils_1.normalizeCompilerOutputBytecode(compilerBytecode.object, libraryAddressPositions);
    const instructions = source_maps_1.decodeInstructions(normalizedCode, compilerBytecode.sourceMap, fileIdToSourceFile, isDeployment);
    return new model_1.Bytecode(contract, isDeployment, normalizedCode, instructions, libraryAddressPositions, immutableReferences, solcVersion);
}
function astSrcToSourceLocation(src, fileIdToSourceFile) {
    const [offset, length, fileId] = src.split(":").map((p) => +p);
    const file = fileIdToSourceFile.get(fileId);
    if (file === undefined) {
        return undefined;
    }
    return new model_1.SourceLocation(file, offset, length);
}
function contractKindToContractType(contractKind) {
    if (contractKind === "library") {
        return model_1.ContractType.LIBRARY;
    }
    if (contractKind === "contract") {
        return model_1.ContractType.CONTRACT;
    }
    return undefined;
}
function astVisibilityToVisibility(visibility) {
    if (visibility === "private") {
        return model_1.ContractFunctionVisibility.PRIVATE;
    }
    if (visibility === "internal") {
        return model_1.ContractFunctionVisibility.INTERNAL;
    }
    if (visibility === "public") {
        return model_1.ContractFunctionVisibility.PUBLIC;
    }
    return model_1.ContractFunctionVisibility.EXTERNAL;
}
function functionDefinitionKindToFunctionType(kind) {
    if (kind === "constructor") {
        return model_1.ContractFunctionType.CONSTRUCTOR;
    }
    if (kind === "fallback") {
        return model_1.ContractFunctionType.FALLBACK;
    }
    if (kind === "receive") {
        return model_1.ContractFunctionType.RECEIVE;
    }
    return model_1.ContractFunctionType.FUNCTION;
}
function astFunctionDefinitionToSelector(functionDefinition) {
    const paramTypes = [];
    for (const param of functionDefinition.parameters.parameters) {
        if (isContractType(param)) {
            paramTypes.push("address");
            continue;
        }
        if (isEnumType(param)) {
            // TODO: If the enum has >= 256 elements this will fail. It should be a uint16. This is
            //  complicated, as enums can be inherited. Fortunately, if multiple parent contracts
            //  define the same enum, solc fails to compile.
            paramTypes.push("uint8");
            continue;
        }
        if (param.typeName.nodeType === "ArrayTypeName") {
            paramTypes.push(`${toCanonicalAbiType(param.typeName.baseType.name)}[]`);
            continue;
        }
        paramTypes.push(toCanonicalAbiType(param.typeName.name));
    }
    return ethereumjs_abi_1.default.methodID(functionDefinition.name, paramTypes);
}
function isContractType(param) {
    return (param.typeName.nodeType === "UserDefinedTypeName" &&
        param.typeDescriptions.typeString.startsWith("contract "));
}
function isEnumType(param) {
    return (param.typeName.nodeType === "UserDefinedTypeName" &&
        param.typeDescriptions.typeString.startsWith("enum "));
}
function toCanonicalAbiType(type) {
    if (type.startsWith("int[")) {
        return `int256${type.slice(3)}`;
    }
    if (type === "int") {
        return "int256";
    }
    if (type.startsWith("uint[")) {
        return `uint256${type.slice(4)}`;
    }
    if (type === "uint") {
        return "uint256";
    }
    if (type.startsWith("fixed[")) {
        return `fixed128x128${type.slice(5)}`;
    }
    if (type === "fixed") {
        return "fixed128x128";
    }
    if (type.startsWith("ufixed[")) {
        return `ufixed128x128${type.slice(6)}`;
    }
    if (type === "ufixed") {
        return "ufixed128x128";
    }
    return type;
}
function correctSelectors(bytecodes, compilerOutput) {
    for (const bytecode of bytecodes) {
        if (bytecode.isDeployment) {
            continue;
        }
        const contract = bytecode.contract;
        const methodIdentifiers = compilerOutput.contracts[contract.location.file.globalName][contract.name]
            .evm.methodIdentifiers;
        for (const [signature, hexSelector] of Object.entries(methodIdentifiers)) {
            const functionName = signature.slice(0, signature.indexOf("("));
            const selector = Buffer.from(hexSelector, "hex");
            const contractFunction = contract.getFunctionFromSelector(selector);
            if (contractFunction !== undefined) {
                continue;
            }
            const fixedSelector = contract.correctSelector(functionName, selector);
            if (!fixedSelector) {
                // tslint:disable-next-line only-buidler-error
                throw new Error(`Failed to compute the selector one or more implementations of ${contract.name}#${functionName}. BuidlerEVM can automatically fix this problem if you don't use function overloading.`);
            }
        }
    }
}
//# sourceMappingURL=compiler-to-model.js.map