/// <reference types="node" />
/// <reference types="mocha" />
import { BuidlerRuntimeEnvironment, ConfigExtender } from "../types";
import { ExtenderManager } from "./core/config/extenders";
import { TasksDSL } from "./core/tasks/dsl";
export declare type GlobalWithBuidlerContext = NodeJS.Global & {
    __buidlerContext: BuidlerContext;
};
export declare class BuidlerContext {
    static isCreated(): boolean;
    static createBuidlerContext(): BuidlerContext;
    static getBuidlerContext(): BuidlerContext;
    static deleteBuidlerContext(): void;
    readonly tasksDSL: TasksDSL;
    readonly extendersManager: ExtenderManager;
    environment?: BuidlerRuntimeEnvironment;
    readonly loadedPlugins: string[];
    readonly configExtenders: ConfigExtender[];
    private _configPath?;
    setBuidlerRuntimeEnvironment(env: BuidlerRuntimeEnvironment): void;
    getBuidlerRuntimeEnvironment(): BuidlerRuntimeEnvironment;
    setPluginAsLoaded(pluginName: string): void;
    setConfigPath(configPath: string): void;
    getConfigPath(): string;
}
//# sourceMappingURL=context.d.ts.map