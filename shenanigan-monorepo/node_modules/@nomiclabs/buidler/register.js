"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const context_1 = require("./internal/context");
const config_loading_1 = require("./internal/core/config/config-loading");
const buidler_params_1 = require("./internal/core/params/buidler-params");
const env_variables_1 = require("./internal/core/params/env-variables");
const runtime_environment_1 = require("./internal/core/runtime-environment");
const typescript_support_1 = require("./internal/core/typescript-support");
const console_1 = require("./internal/util/console");
if (!context_1.BuidlerContext.isCreated()) {
    // tslint:disable-next-line no-var-requires
    require("source-map-support/register");
    const ctx = context_1.BuidlerContext.createBuidlerContext();
    if (console_1.isNodeCalledWithoutAScript()) {
        console_1.disableReplWriterShowProxy();
    }
    typescript_support_1.loadTsNodeIfPresent();
    const buidlerArguments = env_variables_1.getEnvBuidlerArguments(buidler_params_1.BUIDLER_PARAM_DEFINITIONS, process.env);
    if (buidlerArguments.verbose) {
        debug_1.default.enable("buidler*");
    }
    const config = config_loading_1.loadConfigAndTasks(buidlerArguments);
    // TODO: This is here for backwards compatibility.
    // There are very few projects using this.
    if (buidlerArguments.network === undefined) {
        buidlerArguments.network = config.defaultNetwork;
    }
    const env = new runtime_environment_1.Environment(config, buidlerArguments, ctx.tasksDSL.getTaskDefinitions(), ctx.extendersManager.getExtenders());
    ctx.setBuidlerRuntimeEnvironment(env);
    env.injectToGlobal();
}
//# sourceMappingURL=register.js.map