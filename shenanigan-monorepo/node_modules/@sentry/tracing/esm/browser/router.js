import { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';
// type StartTransaction
var global = getGlobalObject();
/**
 * Creates a default router based on
 */
export function defaultRoutingInstrumentation(startTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {
    if (startTransactionOnPageLoad === void 0) { startTransactionOnPageLoad = true; }
    if (startTransactionOnLocationChange === void 0) { startTransactionOnLocationChange = true; }
    if (!global || !global.location) {
        logger.warn('Could not initialize routing instrumentation due to invalid location');
        return;
    }
    var startingUrl = global.location.href;
    var activeTransaction;
    if (startTransactionOnPageLoad) {
        activeTransaction = startTransaction({ name: global.location.pathname, op: 'pageload' });
    }
    if (startTransactionOnLocationChange) {
        addInstrumentationHandler({
            callback: function (_a) {
                var to = _a.to, from = _a.from;
                /**
                 * This early return is there to account for some cases where navigation transaction
                 * starts right after long running pageload. We make sure that if `from` is undefined
                 * and that a valid `startingURL` exists, we don't unnecessarily create a navigation transaction.
                 *
                 * This was hard to duplicate, but this behavior stopped as soon as this fix
                 * was applied. This issue might also only be caused in certain development environments
                 * where the usage of a hot module reloader is causing errors.
                 */
                if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {
                    startingUrl = undefined;
                    return;
                }
                if (from !== to) {
                    startingUrl = undefined;
                    if (activeTransaction) {
                        logger.log("[Tracing] finishing current idleTransaction with op: " + activeTransaction.op);
                        // We want to finish all current ongoing idle transactions as we
                        // are navigating to a new page.
                        activeTransaction.finish();
                    }
                    activeTransaction = startTransaction({ name: global.location.pathname, op: 'navigation' });
                }
            },
            type: 'history',
        });
    }
}
/** default implementation of Browser Tracing before navigate */
export function defaultBeforeNavigate(context) {
    return context;
}
//# sourceMappingURL=router.js.map