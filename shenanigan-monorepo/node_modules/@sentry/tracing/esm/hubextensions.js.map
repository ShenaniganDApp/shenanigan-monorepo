{"version":3,"file":"hubextensions.js","sourceRoot":"","sources":["../src/hubextensions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAO,MAAM,aAAa,CAAC;AAGlD,OAAO,EAAE,4BAA4B,EAAE,MAAM,UAAU,CAAC;AACxD,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAE5C,qEAAqE;AACrE,SAAS,YAAY;IACnB,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC9B,IAAI,KAAK,EAAE;QACT,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;QAC7B,IAAI,IAAI,EAAE;YACR,OAAO;gBACL,cAAc,EAAE,IAAI,CAAC,aAAa,EAAE;aACrC,CAAC;SACH;KACF;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAED;;GAEG;AACH,SAAS,MAAM,CAAwB,GAAQ,EAAE,WAAc;IAC7D,IAAM,MAAM,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC;IAC/B,IAAI,WAAW,CAAC,OAAO,KAAK,SAAS,EAAE;QACrC,IAAM,UAAU,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QACzE,4CAA4C;QAC5C,sCAAsC;QACtC,0CAA0C;QAC1C,WAAW,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,UAAU,CAAC;KAClD;IAED,mEAAmE;IACnE,yGAAyG;IACzG,IAAI,WAAW,CAAC,OAAO,EAAE;QACvB,IAAM,kBAAkB,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAC9E,WAAW,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAkB,CAAC,CAAC;KACrE;IAED,OAAO,WAAW,CAAC;AACrB,CAAC;AAED;;GAEG;AACH,SAAS,gBAAgB,CAAY,OAA2B;IAC9D,IAAM,WAAW,GAAG,IAAI,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACnD,OAAO,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AACnC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAClC,GAAQ,EACR,OAA2B,EAC3B,WAAoB,EACpB,OAAiB;IAEjB,IAAM,WAAW,GAAG,IAAI,eAAe,CAAC,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;IAC5E,OAAO,MAAM,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;AAClC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,qBAAqB;IACnC,IAAM,OAAO,GAAG,cAAc,EAAE,CAAC;IACjC,IAAI,OAAO,CAAC,UAAU,EAAE;QACtB,OAAO,CAAC,UAAU,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,UAAU,IAAI,EAAE,CAAC;QACpE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,gBAAgB,EAAE;YACnD,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;SACnE;QACD,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,YAAY,EAAE;YAC/C,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,YAAY,GAAG,YAAY,CAAC;SAC3D;KACF;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,mBAAmB;IACjC,qBAAqB,EAAE,CAAC;IAExB,wFAAwF;IACxF,4BAA4B,EAAE,CAAC;AACjC,CAAC","sourcesContent":["import { getMainCarrier, Hub } from '@sentry/hub';\nimport { TransactionContext } from '@sentry/types';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Use RNG to generate sampling decision, which all child spans inherit.\n */\nfunction sample<T extends Transaction>(hub: Hub, transaction: T): T {\n  const client = hub.getClient();\n  if (transaction.sampled === undefined) {\n    const sampleRate = (client && client.getOptions().tracesSampleRate) || 0;\n    // if true = we want to have the transaction\n    // if false = we don't want to have it\n    // Math.random (inclusive of 0, but not 1)\n    transaction.sampled = Math.random() < sampleRate;\n  }\n\n  // We only want to create a span list if we sampled the transaction\n  // If sampled == false, we will discard the span anyway, so we can save memory by not storing child spans\n  if (transaction.sampled) {\n    const experimentsOptions = (client && client.getOptions()._experiments) || {};\n    transaction.initSpanRecorder(experimentsOptions.maxSpans as number);\n  }\n\n  return transaction;\n}\n\n/**\n * {@see Hub.startTransaction}\n */\nfunction startTransaction(this: Hub, context: TransactionContext): Transaction {\n  const transaction = new Transaction(context, this);\n  return sample(this, transaction);\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  context: TransactionContext,\n  idleTimeout?: number,\n  onScope?: boolean,\n): IdleTransaction {\n  const transaction = new IdleTransaction(context, hub, idleTimeout, onScope);\n  return sample(hub, transaction);\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (carrier.__SENTRY__) {\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n    if (!carrier.__SENTRY__.extensions.startTransaction) {\n      carrier.__SENTRY__.extensions.startTransaction = startTransaction;\n    }\n    if (!carrier.__SENTRY__.extensions.traceHeaders) {\n      carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n    }\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n"]}