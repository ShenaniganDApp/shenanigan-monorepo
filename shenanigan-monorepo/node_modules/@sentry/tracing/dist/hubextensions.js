Object.defineProperty(exports, "__esModule", { value: true });
var hub_1 = require("@sentry/hub");
var errors_1 = require("./errors");
var idletransaction_1 = require("./idletransaction");
var transaction_1 = require("./transaction");
/** Returns all trace headers that are currently on the top scope. */
function traceHeaders() {
    var scope = this.getScope();
    if (scope) {
        var span = scope.getSpan();
        if (span) {
            return {
                'sentry-trace': span.toTraceparent(),
            };
        }
    }
    return {};
}
/**
 * Use RNG to generate sampling decision, which all child spans inherit.
 */
function sample(hub, transaction) {
    var client = hub.getClient();
    if (transaction.sampled === undefined) {
        var sampleRate = (client && client.getOptions().tracesSampleRate) || 0;
        // if true = we want to have the transaction
        // if false = we don't want to have it
        // Math.random (inclusive of 0, but not 1)
        transaction.sampled = Math.random() < sampleRate;
    }
    // We only want to create a span list if we sampled the transaction
    // If sampled == false, we will discard the span anyway, so we can save memory by not storing child spans
    if (transaction.sampled) {
        var experimentsOptions = (client && client.getOptions()._experiments) || {};
        transaction.initSpanRecorder(experimentsOptions.maxSpans);
    }
    return transaction;
}
/**
 * {@see Hub.startTransaction}
 */
function startTransaction(context) {
    var transaction = new transaction_1.Transaction(context, this);
    return sample(this, transaction);
}
/**
 * Create new idle transaction.
 */
function startIdleTransaction(hub, context, idleTimeout, onScope) {
    var transaction = new idletransaction_1.IdleTransaction(context, hub, idleTimeout, onScope);
    return sample(hub, transaction);
}
exports.startIdleTransaction = startIdleTransaction;
/**
 * @private
 */
function _addTracingExtensions() {
    var carrier = hub_1.getMainCarrier();
    if (carrier.__SENTRY__) {
        carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};
        if (!carrier.__SENTRY__.extensions.startTransaction) {
            carrier.__SENTRY__.extensions.startTransaction = startTransaction;
        }
        if (!carrier.__SENTRY__.extensions.traceHeaders) {
            carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;
        }
    }
}
exports._addTracingExtensions = _addTracingExtensions;
/**
 * This patches the global object and injects the Tracing extensions methods
 */
function addExtensionMethods() {
    _addTracingExtensions();
    // If an error happens globally, we should make sure transaction status is set to error.
    errors_1.registerErrorInstrumentation();
}
exports.addExtensionMethods = addExtensionMethods;
//# sourceMappingURL=hubextensions.js.map