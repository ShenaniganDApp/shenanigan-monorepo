input ActiveToggledInput {
  clientSubscriptionId: String
}

type ActiveToggledPayload {
  challenge: Challenge
  clientSubscriptionId: String
}

input AddOptionsInput {
  positiveOptions: [String!]
  negativeOptions: [String!]
  challengeId: String!
  clientMutationId: String
}

type AddOptionsPayload {
  challenge: Challenge
  error: String
  success: String
  clientMutationId: String
}

input AddOrRemoveModeratorInput {
  _id: String!
  clientMutationId: String
}

type AddOrRemoveModeratorPayload {
  user: User
  moderator: User
  success: String
  error: String
  clientMutationId: String
}

type BoxProfile {
  ethereumAddress: String
  name: String
  description: String
  location: String
  job: String
  emoji: String
  imageUrl: String
  coverImageUrl: String
  website: String
}

"""Challenge data"""
type Challenge implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  address: String!
  title: String!
  content: String
  active: Boolean!
  live: Boolean!
  color: String!
  image: String!
  series: Int!
  donations(after: String, first: Int, before: String, last: Int): DonationConnection
  totalDonations: Float!
  creator: User!
  positiveOptions: [String]!
  negativeOptions: [String]!
  predictions(after: String, first: Int, before: String, last: Int): PredictionConnection
  comments(after: String, first: Int, before: String, last: Int): CommentConnection
  challengeCards(after: String, first: Int, before: String, last: Int): ChallengeCardConnection
  votePeriods: [[Int]]!
  outcomeVotes(after: String, first: Int, before: String, last: Int): VoteConnection
  skipVotes(after: String, first: Int, before: String, last: Int): VoteConnection
}

input ChallengeAddedInput {
  clientSubscriptionId: String
}

type ChallengeAddedPayload {
  challenge: Challenge
  clientSubscriptionId: String
}

"""ChallengeCard data"""
type ChallengeCard implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  title: String!
  content: String
  address: String!
  ipfs: String!
  streamUrl: String!
  price: Float!
  result: Int!
  totalMint: Int!
  creator: User!
  challenge: Challenge!
}

"""A connection to a list of items."""
type ChallengeCardConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [ChallengeCardEdge]!
}

"""An edge in a connection."""
type ChallengeCardEdge {
  """The item at the end of the edge"""
  node: ChallengeCard

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type ChallengeConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [ChallengeEdge]!
}

"""An edge in a connection."""
type ChallengeEdge {
  """The item at the end of the edge"""
  node: Challenge

  """A cursor for use in pagination"""
  cursor: String!
}

input ChallengeResultInput {
  clientSubscriptionId: String
}

type ChallengeResultPayload {
  challenge: Challenge
  clientSubscriptionId: String
}

"""Comment data"""
type Comment implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID!
  challenge: Challenge
  challengeSeries: Int!
  visible: Boolean!
  content: String!
  creator: User!
}

input CommentAddedInput {
  clientSubscriptionId: String
}

type CommentAddedPayload {
  comment: Comment
  clientSubscriptionId: String
}

"""A connection to a list of items."""
type CommentConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [CommentEdge]!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge"""
  node: Comment

  """A cursor for use in pagination"""
  cursor: String!
}

input CreateChallengeCardInput {
  title: String!
  content: String
  address: String!
  ipfs: String!
  streamUrl: String!
  price: Float!
  result: Int!
  totalMint: Int!
  challengeId: String!
  blockTime: Int!
  clientMutationId: String
}

type CreateChallengeCardPayload {
  challengeCardEdge: ChallengeCardEdge
  challenge: Challenge
  error: String
  success: String
  clientMutationId: String
}

input CreateChallengeInput {
  address: String!
  title: String!
  content: String!
  image: String!
  positiveOptions: [String]!
  negativeOptions: [String]!
  clientMutationId: String
}

type CreateChallengePayload {
  challengeEdge: ChallengeEdge
  error: String
  success: String
  clientMutationId: String
}

input CreateCommentInput {
  challengeId: ID!
  content: String!
  clientMutationId: String
}

type CreateCommentPayload {
  commentEdge: CommentEdge
  challenge: Challenge
  error: String
  success: String
  clientMutationId: String
}

input CreateDonationInput {
  amount: Float!
  content: String
  challenge: String!
  clientMutationId: String
}

type CreateDonationPayload {
  donationEdge: DonationEdge
  challenge: Challenge
  comment: Comment
  success: String
  error: String
  clientMutationId: String
}

input CreatePredictionInput {
  cards: [String]!
  option: Int!
  opponentId: String
  challengeId: String!
  content: String
  blockTime: Int!
  clientMutationId: String
}

type CreatePredictionPayload {
  predictionEdge: PredictionEdge
  challenge: Challenge
  opponentPrediction: Prediction
  comment: Comment
  error: String
  success: String
  clientMutationId: String
}

input CreateVoteInput {
  choice: Int!
  voteType: String!
  challengeId: String!
  blockTime: Int!
  clientMutationId: String
}

type CreateVotePayload {
  voteEdge: VoteEdge
  success: String
  error: String
  clientMutationId: String
}

input DeleteChallengeCardInput {
  id: String!
  clientMutationId: String
}

type DeleteChallengeCardPayload {
  success: String
  error: String
  clientMutationId: String
}

input DeleteChallengeInput {
  challengeId: String!
  clientMutationId: String
}

type DeleteChallengePayload {
  error: String
  clientMutationId: String
}

input DeleteInput {
  _id: String!
  clientMutationId: String
}

type DeletePayload {
  message: String
  success: String
  error: String
  clientMutationId: String
}

"""Donation data"""
type Donation implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID!
  amount: Float!
  creator: User!
  comment: Comment
  challengeSeries: Int!
  challenge: Challenge
  receiver: User
}

"""A connection to a list of items."""
type DonationConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [DonationEdge]!
}

"""An edge in a connection."""
type DonationEdge {
  """The item at the end of the edge"""
  node: Donation

  """A cursor for use in pagination"""
  cursor: String!
}

input GetOrCreateUserInput {
  username: String
  address: String!
  burner: Boolean!
  clientMutationId: String
}

type GetOrCreateUserPayload {
  user: User
  error: String
  success: String
  clientMutationId: String
}

input LiveToggledInput {
  clientSubscriptionId: String
}

type LiveToggledPayload {
  challenge: Challenge
  liveChallenge: Challenge
  clientSubscriptionId: String
}

type Mutation {
  AddOrRemoveModerator(input: AddOrRemoveModeratorInput!): AddOrRemoveModeratorPayload
  DeleteUser(input: DeleteInput!): DeletePayload
  GetOrCreateUser(input: GetOrCreateUserInput!): GetOrCreateUserPayload
  AddOptions(input: AddOptionsInput!): AddOptionsPayload
  CreateChallenge(input: CreateChallengeInput!): CreateChallengePayload
  DeleteChallenge(input: DeleteChallengeInput!): DeleteChallengePayload
  StartResultVote(input: StartResultVoteInput!): StartResultVotePayload
  ToggleActive(input: ToggleActiveInput!): ToggleActivePayload
  ToggleLive(input: ToggleLiveInput!): ToggleLivePayload
  CreatePrediction(input: CreatePredictionInput!): CreatePredictionPayload
  CreateComment(input: CreateCommentInput!): CreateCommentPayload
  ToggleVisible(input: ToggleVisibleInput!): ToggleVisiblePayload
  CreateDonation(input: CreateDonationInput!): CreateDonationPayload
  CreateChallengeCard(input: CreateChallengeCardInput!): CreateChallengeCardPayload
  DeleteChallengeCard(input: DeleteChallengeCardInput!): DeleteChallengeCardPayload
  CreateVote(input: CreateVoteInput!): CreateVotePayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfoExtended {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Prediction data"""
type Prediction implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID!
  cards: [String]!
  option: Int!
  opponent: Prediction
  challenge: Challenge
  creator: User
  comment: Comment
  blockTimestamp: Int!
}

"""A connection to a list of items."""
type PredictionConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [PredictionEdge]!
}

"""An edge in a connection."""
type PredictionEdge {
  """The item at the end of the edge"""
  node: Prediction

  """A cursor for use in pagination"""
  cursor: String!
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
  user(id: ID!): User
  users(after: String, first: Int, before: String, last: Int): UserConnection
  userByEth(address: String!): User
  liveChallenge: Challenge
  challenge(id: ID!): Challenge
  challenges(after: String, first: Int, before: String, last: Int): ChallengeConnection!
  activeChallenges(after: String, first: Int, before: String, last: Int): ChallengeConnection!
  prediction(id: ID!): Prediction
  predictions(after: String, first: Int, before: String, last: Int, search: String): PredictionConnection
  donation(id: ID!): Donation
  donations(after: String, first: Int, before: String, last: Int): DonationConnection
  comment(id: ID!): Comment
  comments(after: String, first: Int, before: String, last: Int, search: String): CommentConnection
  challengeCard(id: ID!): ChallengeCard
  challengeCards(after: String, first: Int, before: String, last: Int, search: String): ChallengeCardConnection
  vote(id: ID!): Vote
  votes(after: String, first: Int, before: String, last: Int, search: String): VoteConnection
  skipVotes(after: String, first: Int, before: String, last: Int, search: String): VoteConnection
  outcomeVotes(after: String, first: Int, before: String, last: Int, search: String): VoteConnection
  getBoxProfile(address: String): BoxProfile
}

input StartResultVoteInput {
  challengeId: String!
  blockTime: Int!
  clientMutationId: String
}

type StartResultVotePayload {
  challenge: Challenge
  error: String
  success: String
  clientMutationId: String
}

type Subscription {
  ChallengeAdded(input: ChallengeAddedInput!): ChallengeAddedPayload
  ChallengeResultStarted(input: ChallengeResultInput!): ChallengeResultPayload
  CommentAdded(input: CommentAddedInput!): CommentAddedPayload
  VoteAdded(input: VoteAddedInput!): VoteAddedPayload
  ActiveToggled(input: ActiveToggledInput!): ActiveToggledPayload
  LiveToggled(input: LiveToggledInput!): LiveToggledPayload
}

input ToggleActiveInput {
  challengeId: String!
  clientMutationId: String
}

type ToggleActivePayload {
  challenge: Challenge
  error: String
  success: String
  clientMutationId: String
}

input ToggleLiveInput {
  challengeId: String!
  clientMutationId: String
}

type ToggleLivePayload {
  challenge: Challenge
  error: String
  success: String
  clientMutationId: String
}

input ToggleVisibleInput {
  _id: ID!
  clientMutationId: String
}

type ToggleVisiblePayload {
  comment: Comment
  success: String
  error: String
  clientMutationId: String
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID!
  username: String
  addresses: [String]!
  burner: Boolean!
  predictions(after: String, first: Int, before: String, last: Int): PredictionConnection!
  donations(after: String, first: Int, before: String, last: Int): DonationConnection!
  createdChallenges(after: String, first: Int, before: String, last: Int): ChallengeConnection!
  outcomeVotes(after: String, first: Int, before: String, last: Int): VoteConnection!
  skipVotes(after: String, first: Int, before: String, last: Int): VoteConnection!
  moderatedUsers(after: String, first: Int, before: String, last: Int): UserConnection!
  moderator(after: String, first: Int, before: String, last: Int): UserConnection
}

"""A connection to a list of items."""
type UserConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [UserEdge]!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

"""Vote data"""
type Vote implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID!
  challenge: Challenge
  challengeSeries: Int!
  choice: Int!
  voteType: String!
  creator: User!
}

input VoteAddedInput {
  clientSubscriptionId: String
}

type VoteAddedPayload {
  vote: Vote
  clientSubscriptionId: String
}

"""A connection to a list of items."""
type VoteConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [VoteEdge]!
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge"""
  node: Vote

  """A cursor for use in pagination"""
  cursor: String!
}
