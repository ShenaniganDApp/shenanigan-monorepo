input AddOptionsInput {
  options: [String!]!
  wagerId: String!
  clientMutationId: String
}

type AddOptionsPayload {
  options: [String]
  error: String
  clientMutationId: String
}

"""Bet data"""
type Bet implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID
  amount: Float!
  option: Int!
  wager: Wager
  creator: User
  comment: Comment
}

"""A connection to a list of items."""
type BetConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [BetEdge]!
}

"""An edge in a connection."""
type BetEdge {
  """The item at the end of the edge"""
  node: Bet

  """A cursor for use in pagination"""
  cursor: String!
}

"""Comment data"""
type Comment implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID
  wager: Wager
  content: String
  creator: User
}

type CommentAddedPayload {
  commentEdge: CommentEdge
}

"""A connection to a list of items."""
type CommentConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [CommentEdge]!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge"""
  node: Comment

  """A cursor for use in pagination"""
  cursor: String!
}

input CreateBDonationInput {
  amount: Float!
  content: String
  wagerId: String!
  clientMutationId: String
}

type CreateBDonationPayload {
  amount: Float
  error: String
  clientMutationId: String
}

input CreateBetInput {
  amount: Float!
  option: Int!
  wagerId: String!
  content: String
  clientMutationId: String
}

type CreateBetPayload {
  amount: Float
  option: Int
  error: String
  clientMutationId: String
}

input CreateCommentInput {
  content: String!
  wagerId: String!
  clientMutationId: String
}

type CreateCommentPayload {
  _id: ID!
  content: String!
  creator: ID!
  error: String
  clientMutationId: String
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
  clientMutationId: String
}

type CreateUserPayload {
  token: String
  error: String
  clientMutationId: String
}

input CreateWagerInput {
  title: String!
  content: String!
  options: [String]!
  clientMutationId: String
}

type CreateWagerPayload {
  _id: String!
  title: String
  content: String
  options: [String]
  error: String
  clientMutationId: String
}

input DeleteInput {
  _id: String!
  clientMutationId: String
}

type DeletePayload {
  message: String
  error: String
  clientMutationId: String
}

input DeleteWagerInput {
  wagerId: String!
  creator: String!
  clientMutationId: String
}

type DeleteWagerPayload {
  error: String
  clientMutationId: String
}

"""Donation data"""
type Donation implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID
  amount: Float!
  creator: User
}

"""A connection to a list of items."""
type DonationConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [DonationEdge]!
}

"""An edge in a connection."""
type DonationEdge {
  """The item at the end of the edge"""
  node: Donation

  """A cursor for use in pagination"""
  cursor: String!
}

input LoginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginPayload {
  token: String
  error: String
  clientMutationId: String
}

type Mutation {
  CreateUser(input: CreateUserInput!): CreateUserPayload
  Login(input: LoginInput!): LoginPayload
  DeleteUser(input: DeleteInput!): DeletePayload
  AddOptions(input: AddOptionsInput!): AddOptionsPayload
  CreateWager(input: CreateWagerInput!): CreateWagerPayload
  DeleteWager(input: DeleteWagerInput!): DeleteWagerPayload
  ToggleLive(input: ToggleLiveInput!): ToggleLivePayload
  CreateBet(input: CreateBetInput!): CreateBetPayload
  CreateComment(input: CreateCommentInput!): CreateCommentPayload
  CreateDonation(input: CreateBDonationInput!): CreateBDonationPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfoExtended {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""The root of all... queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  me: User
  user(_id: String!): User
  users(after: String, first: Int, before: String, last: Int, search: String): UserConnection
  wager(id: ID!): Wager
  wagers(after: String, first: Int, before: String, last: Int, search: String): WagerConnection
  bet(id: ID!): Bet
  bets(after: String, first: Int, before: String, last: Int, search: String): BetConnection
  donation(id: ID!): Donation
  donations(after: String, first: Int, before: String, last: Int, search: String): DonationConnection
}

type Subscription {
  CommentAdded: CommentAddedPayload
}

input ToggleLiveInput {
  wagerId: String!
  clientMutationId: String
}

type ToggleLivePayload {
  live: Boolean!
  error: String
  clientMutationId: String
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID
  username: String
  email: String
  password: String
  bets(after: String, first: Int, before: String, last: Int): BetConnection
  donations(after: String, first: Int, before: String, last: Int): DonationConnection
  createdWagers(after: String, first: Int, before: String, last: Int): WagerConnection
}

"""A connection to a list of items."""
type UserConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [UserEdge]!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

"""Wager data"""
type Wager implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID
  title: String
  content: String
  live: Boolean
  creator: User
  options: [String]
  bets(after: String, first: Int, before: String, last: Int): BetConnection
  comments(after: String, first: Int, before: String, last: Int): CommentConnection
}

"""A connection to a list of items."""
type WagerConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [WagerEdge]!
}

"""An edge in a connection."""
type WagerEdge {
  """The item at the end of the edge"""
  node: Wager

  """A cursor for use in pagination"""
  cursor: String!
}

