# source: http://192.168.191.1:8080/graphql
# timestamp: Sun May 05 2019 03:36:26 GMT-0700 (Pacific Daylight Time)

input AddOptionsInput {
  options: [String!]!
  pollId: String!
  clientMutationId: String
}

type AddOptionsPayload {
  options: [String]
  error: String
  clientMutationId: String
}

"""Bet data"""
type Bet implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID
  amount: Float!
  option: Int!
  creator: User
  poll: Poll
}

"""A connection to a list of items."""
type BetConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [BetEdge]!
}

"""An edge in a connection."""
type BetEdge {
  """The item at the end of the edge"""
  node: Bet!

  """A cursor for use in pagination"""
  cursor: String!
}

input CreateBetInput {
  amount: Float!
  option: Int!
  pollId: String!
  clientMutationId: String
}

type CreateBetPayload {
  amount: Float
  option: Int
  error: String
  clientMutationId: String
}

input CreatePollInput {
  title: String!
  description: String!
  options: [String]!
  clientMutationId: String
}

type CreatePollPayload {
  _id: ID!
  title: String
  description: String
  error: String
  clientMutationId: String
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
  clientMutationId: String
}

type CreateUserPayload {
  token: String
  error: String
  clientMutationId: String
}

input DeletePollInput {
  pollId: String!
  creator: String!
  clientMutationId: String
}

type DeletePollPayload {
  error: String
  clientMutationId: String
}

input LoginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginPayload {
  token: String
  error: String
  clientMutationId: String
}

type Mutation {
  CreateUser(input: CreateUserInput!): CreateUserPayload
  Login(input: LoginInput!): LoginPayload
  AddOptions(input: AddOptionsInput!): AddOptionsPayload
  CreatePoll(input: CreatePollInput!): CreatePollPayload
  DeletePoll(input: DeletePollInput!): DeletePollPayload
  ToggleLive(input: ToggleLiveInput!): ToggleLivePayload
  CreateBet(input: CreateBetInput!): CreateBetPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfoExtended {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Poll data"""
type Poll implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID
  title: String
  description: String
  live: Boolean
  creator: User
  options: [String]
  bets(after: String, first: Int, before: String, last: Int): BetConnection
  createdAt: String!
  updatedAt: String!
}

type PollAddedPayload {
  pollEdge: PollEdge
}

"""A connection to a list of items."""
type PollConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [PollEdge]!
}

"""An edge in a connection."""
type PollEdge {
  """The item at the end of the edge"""
  node: Poll!

  """A cursor for use in pagination"""
  cursor: String!
}

"""The root of all... queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  me: User
  user(_id: ID!): User
  users(after: String, first: Int, before: String, last: Int, search: String): UserConnection
  poll(_id: ID!): Poll
  polls(after: String, first: Int, before: String, last: Int, search: String): PollConnection
}

type Subscription {
  PollAdded: PollAddedPayload
}

input ToggleLiveInput {
  pollId: String!
  clientMutationId: String
}

type ToggleLivePayload {
  live: Boolean!
  error: String
  clientMutationId: String
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID
  username: String
  email: String
  password: String
  bets(after: String, first: Int, before: String, last: Int): BetConnection
  createdPolls(after: String, first: Int, before: String, last: Int): PollConnection
}

"""A connection to a list of items."""
type UserConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
      This allows a client to fetch the first five objects by passing "5" as the
      argument to "first", then fetch the total count so it could display "5 of 83",
      for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [UserEdge]!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User!

  """A cursor for use in pagination"""
  cursor: String!
}
