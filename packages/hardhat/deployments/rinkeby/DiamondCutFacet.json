{
  "address": "0x94330CB0C9B9Ab4AaaBD2DC5f77A4c8035bfF2fa",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc61664a0fedccf6e26164fd986a1791502044ff30ba06a6a21c504356f21a867",
  "receipt": {
    "to": null,
    "from": "0xE8aDaeA0bA507a28d1309051BecEb4db7Fe377AF",
    "contractAddress": "0x94330CB0C9B9Ab4AaaBD2DC5f77A4c8035bfF2fa",
    "transactionIndex": 16,
    "gasUsed": "1295362",
    "logsBloom": "0x
    "blockHash": "0xd623c0a01978277d9500f12887dee8ab248bc5e787ffee9cf77f784ebbd3f5f3",
    "transactionHash": "0xc61664a0fedccf6e26164fd986a1791502044ff30ba06a6a21c504356f21a867",
    "logs": [],
    "blockNumber": 8539834,
    "cumulativeGasUsed": "4071882",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f56a4f762da1211ecdbf2a9ff16253f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/facets/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\",\"keccak256\":\"0xa9609e9051513954b1f47f9615a032da5a617b26f70d261d44a82a105b4f766e\",\"license\":\"MIT\"},\"src/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\",\"keccak256\":\"0x78aa2f18a649ac780cb9fde2b2206cbcf53c3800fb4a265247b857ad592af244\",\"license\":\"MIT\"},\"src/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // uint16 selectorCount = uint16(diamondStorage().selectors.length);\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint16 selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n            ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector);\\n            ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress;\\n            ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint16 selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n            ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(oldFacetAddress, selector);\\n            // add function\\n            ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition;\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector);\\n            ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function removeFunction(address _facetAddress, bytes4 _selector) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\",\"keccak256\":\"0xe61fb4b21d158f419057bf9fb7e2b9137711aabc4941be01ff4f2d35173a983a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061167a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610e2a565b610045565b005b61004d61009e565b61009761005a858761149c565b8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506100dc92505050565b5050505050565b6100a661034a565b600401546001600160a01b031633146100da5760405162461bcd60e51b81526004016100d190611107565b60405180910390fd5b565b60005b83518110156102ff57600084828151811061010a57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015190506000600281111561013957634e487b7160e01b600052602160045260246000fd5b81600281111561015957634e487b7160e01b600052602160045260246000fd5b14156101c4576101bf85838151811061018257634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518684815181106101ae57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015161036e565b6102ec565b60018160028111156101e657634e487b7160e01b600052602160045260246000fd5b141561024c576101bf85838151811061020f57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015186848151811061023b57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610591565b600281600281111561026e57634e487b7160e01b600052602160045260246000fd5b14156102d4576101bf85838151811061029757634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518684815181106102c357634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516107ce565b60405162461bcd60e51b81526004016100d1906111f1565b50806102f7816115b1565b9150506100df565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161033393929190610f51565b60405180910390a161034582826108a7565b505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b600081511161038f5760405162461bcd60e51b81526004016100d190611149565b600061039961034a565b90506001600160a01b0383166103c15760405162461bcd60e51b81526004016100d190611238565b6001600160a01b038316600090815260018201602052604090205461ffff81166104635761040784604051806060016040528060248152602001611621602491396109ce565b6002820180546001600160a01b038616600081815260018087016020908152604083208201805461ffff191661ffff90961695909517909455845490810185559381529190912090910180546001600160a01b03191690911790555b60005b835181101561009757600084828151811061049157634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b031680156104e15760405162461bcd60e51b81526004016100d19061132f565b6001600160a01b03871660008181526001878101602090815260408084208054938401815584528184206008840401805463ffffffff60079095166004026101000a948502191660e089901c94909402939093179092556001600160e01b031986168352889052902080546001600160a01b03191690911761ffff60a01b1916600160a01b61ffff871602179055836105798161158f565b94505050508080610589906115b1565b915050610466565b60008151116105b25760405162461bcd60e51b81526004016100d190611149565b60006105bc61034a565b90506001600160a01b0383166105e45760405162461bcd60e51b81526004016100d190611238565b6001600160a01b038316600090815260018201602052604090205461ffff81166106865761062a84604051806060016040528060248152602001611621602491396109ce565b6002820180546001600160a01b038616600081815260018087016020908152604083208201805461ffff191661ffff90961695909517909455845490810185559381529190912090910180546001600160a01b03191690911790555b60005b83518110156100975760008482815181106106b457634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0390811690871681141561070a5760405162461bcd60e51b81526004016100d190611384565b61071481836109ef565b6001600160e01b03198216600081815260208781526040808320805461ffff60a01b1916600160a01b61ffff8b16021781556001600160a01b038c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925287905281546001600160a01b031916179055836107b68161158f565b945050505080806107c6906115b1565b915050610689565b60008151116107ef5760405162461bcd60e51b81526004016100d190611149565b60006107f961034a565b90506001600160a01b038316156108225760405162461bcd60e51b81526004016100d1906113e1565b60005b82518110156108a157600083828151811061085057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b031661088c81836109ef565b50508080610899906115b1565b915050610825565b50505050565b6001600160a01b0382166108d9578051156108d45760405162461bcd60e51b81526004016100d190611064565b6109ca565b60008151116108fa5760405162461bcd60e51b81526004016100d190611284565b6001600160a01b038216301461092c5761092c826040518060600160405280602881526020016115f9602891396109ce565b600080836001600160a01b0316836040516109479190610f35565b600060405180830381855af49150503d8060008114610982576040519150601f19603f3d011682016040523d82523d6000602084013e610987565b606091505b5091509150816108a1578051156109b2578060405162461bcd60e51b81526004016100d1919061104a565b60405162461bcd60e51b81526004016100d1906110c1565b5050565b813b81816108a15760405162461bcd60e51b81526004016100d1919061104a565b60006109f961034a565b90506001600160a01b038316610a215760405162461bcd60e51b81526004016100d190611194565b6001600160a01b038316301415610a4a5760405162461bcd60e51b81526004016100d1906112e1565b6001600160e01b03198216600090815260208281526040808320546001600160a01b0387168452600180860190935290832054600160a01b90910461ffff169291610a9491611485565b9050808214610b9c576001600160a01b03851660009081526001840160205260408120805483908110610ad757634e487b7160e01b600052603260045260246000fd5b600091825260208083206008830401546001600160a01b038a168452600188019091526040909220805460079092166004026101000a90920460e01b925082919085908110610b3657634e487b7160e01b600052603260045260246000fd5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b031992909216825284905260409020805461ffff60a01b1916600160a01b61ffff8516021790555b6001600160a01b03851660009081526001840160205260409020805480610bd357634e487b7160e01b600052603160045260246000fd5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319861682528490526040902080546001600160b01b031916905580610097576002830154600090610c3f90600190611485565b6001600160a01b038716600090815260018087016020526040909120015490915061ffff16808214610d1a576000856002018381548110610c9057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546002870180546001600160a01b039092169250829184908110610ccf57634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815260018781019092526040902001805461ffff191661ffff83161790555b84600201805480610d3b57634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03891682526001878101909152604090912001805461ffff1916905550505050505050565b80356001600160a01b0381168114610da457600080fd5b919050565b600082601f830112610db9578081fd5b81356020610dce610dc983611461565b611437565b8281528181019085830183850287018401881015610dea578586fd5b855b85811015610e1d5781356001600160e01b031981168114610e0b578788fd5b84529284019290840190600101610dec565b5090979650505050505050565b600080600080600060608688031215610e41578081fd5b853567ffffffffffffffff80821115610e58578283fd5b818801915088601f830112610e6b578283fd5b813581811115610e79578384fd5b60208a818284028601011115610e8d578485fd5b8084019850819750610ea0818b01610d8d565b965060408a0135935082841115610eb5578485fd5b838a0193508a601f850112610ec8578485fd5b8335915082821115610ed8578485fd5b8a81838601011115610ee8578485fd5b979a96995094975050909401935090919050565b6001600160a01b03169052565b60008151808452610f21816020860160208601611563565b601f01601f19169290920160200192915050565b60008251610f47818460208701611563565b9190910192915050565b606080825284518282018190526000919060809081850190602080820287018401818b01875b8481101561101b57898303607f19018652815180516001600160a01b03168452848101518985019060038110610fbb57634e487b7160e01b8c52602160045260248cfd5b858701526040918201519185018a9052815190819052908501908a90898601905b808310156110065783516001600160e01b0319168252928701926001929092019190870190610fdc565b50978601979450505090830190600101610f77565b50506110298289018b610efc565b878103604089015261103b818a610f09565b9b9a5050505050505050505050565b60006020825261105d6020830184610f09565b9392505050565b6020808252603c908201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860408201527f3029206275745f63616c6c64617461206973206e6f7420656d70747900000000606082015260800190565b60208082526026908201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656040820152651d995c9d195960d21b606082015260800190565b60208082526022908201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60408201526132b960f11b606082015260800190565b6020808252602b908201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660408201526a1858d95d081d1bc818dd5d60aa1b606082015260800190565b60208082526037908201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360408201527f74696f6e207468617420646f65736e2774206578697374000000000000000000606082015260800190565b60208082526027908201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756040820152663a20b1ba34b7b760c91b606082015260800190565b6020808252602c908201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260408201526b65206164647265737328302960a01b606082015260800190565b6020808252603d908201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460408201527f7920627574205f696e6974206973206e6f742061646472657373283029000000606082015260800190565b6020808252602e908201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560408201526d3a30b1363290333ab731ba34b7b760911b606082015260800190565b60208082526035908201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6040820152746e207468617420616c72656164792065786973747360581b606082015260800190565b60208082526038908201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60408201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000606082015260800190565b60208082526036908201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604082015275657373206d757374206265206164647265737328302960501b606082015260800190565b60405181810167ffffffffffffffff81118282101715611459576114596115e2565b604052919050565b600067ffffffffffffffff82111561147b5761147b6115e2565b5060209081020190565b600082821015611497576114976115cc565b500390565b60006114aa610dc984611461565b8381526020808201919084845b87811015611557578135870160608082360312156114d3578788fd5b604080519182019167ffffffffffffffff80841182851017156114f8576114f86115e2565b83835261150485610d8d565b825287850135935060038410611518578a8bfd5b83888301528285013593508084111561152f578a8bfd5b5061153c36848601610da9565b918101919091528752505093820193908201906001016114b7565b50919695505050505050565b60005b8381101561157e578181015183820152602001611566565b838111156108a15750506000910152565b600061ffff808316818114156115a7576115a76115cc565b6001019392505050565b60006000198214156115c5576115c56115cc565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a26469706673582212201ca7699750f47fd35668f114ae460fec43f952251693f7aa61b2cfe9bbb9524064736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610e2a565b610045565b005b61004d61009e565b61009761005a858761149c565b8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506100dc92505050565b5050505050565b6100a661034a565b600401546001600160a01b031633146100da5760405162461bcd60e51b81526004016100d190611107565b60405180910390fd5b565b60005b83518110156102ff57600084828151811061010a57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015190506000600281111561013957634e487b7160e01b600052602160045260246000fd5b81600281111561015957634e487b7160e01b600052602160045260246000fd5b14156101c4576101bf85838151811061018257634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518684815181106101ae57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015161036e565b6102ec565b60018160028111156101e657634e487b7160e01b600052602160045260246000fd5b141561024c576101bf85838151811061020f57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015186848151811061023b57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610591565b600281600281111561026e57634e487b7160e01b600052602160045260246000fd5b14156102d4576101bf85838151811061029757634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518684815181106102c357634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516107ce565b60405162461bcd60e51b81526004016100d1906111f1565b50806102f7816115b1565b9150506100df565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161033393929190610f51565b60405180910390a161034582826108a7565b505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b600081511161038f5760405162461bcd60e51b81526004016100d190611149565b600061039961034a565b90506001600160a01b0383166103c15760405162461bcd60e51b81526004016100d190611238565b6001600160a01b038316600090815260018201602052604090205461ffff81166104635761040784604051806060016040528060248152602001611621602491396109ce565b6002820180546001600160a01b038616600081815260018087016020908152604083208201805461ffff191661ffff90961695909517909455845490810185559381529190912090910180546001600160a01b03191690911790555b60005b835181101561009757600084828151811061049157634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b031680156104e15760405162461bcd60e51b81526004016100d19061132f565b6001600160a01b03871660008181526001878101602090815260408084208054938401815584528184206008840401805463ffffffff60079095166004026101000a948502191660e089901c94909402939093179092556001600160e01b031986168352889052902080546001600160a01b03191690911761ffff60a01b1916600160a01b61ffff871602179055836105798161158f565b94505050508080610589906115b1565b915050610466565b60008151116105b25760405162461bcd60e51b81526004016100d190611149565b60006105bc61034a565b90506001600160a01b0383166105e45760405162461bcd60e51b81526004016100d190611238565b6001600160a01b038316600090815260018201602052604090205461ffff81166106865761062a84604051806060016040528060248152602001611621602491396109ce565b6002820180546001600160a01b038616600081815260018087016020908152604083208201805461ffff191661ffff90961695909517909455845490810185559381529190912090910180546001600160a01b03191690911790555b60005b83518110156100975760008482815181106106b457634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0390811690871681141561070a5760405162461bcd60e51b81526004016100d190611384565b61071481836109ef565b6001600160e01b03198216600081815260208781526040808320805461ffff60a01b1916600160a01b61ffff8b16021781556001600160a01b038c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925287905281546001600160a01b031916179055836107b68161158f565b945050505080806107c6906115b1565b915050610689565b60008151116107ef5760405162461bcd60e51b81526004016100d190611149565b60006107f961034a565b90506001600160a01b038316156108225760405162461bcd60e51b81526004016100d1906113e1565b60005b82518110156108a157600083828151811061085057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b031661088c81836109ef565b50508080610899906115b1565b915050610825565b50505050565b6001600160a01b0382166108d9578051156108d45760405162461bcd60e51b81526004016100d190611064565b6109ca565b60008151116108fa5760405162461bcd60e51b81526004016100d190611284565b6001600160a01b038216301461092c5761092c826040518060600160405280602881526020016115f9602891396109ce565b600080836001600160a01b0316836040516109479190610f35565b600060405180830381855af49150503d8060008114610982576040519150601f19603f3d011682016040523d82523d6000602084013e610987565b606091505b5091509150816108a1578051156109b2578060405162461bcd60e51b81526004016100d1919061104a565b60405162461bcd60e51b81526004016100d1906110c1565b5050565b813b81816108a15760405162461bcd60e51b81526004016100d1919061104a565b60006109f961034a565b90506001600160a01b038316610a215760405162461bcd60e51b81526004016100d190611194565b6001600160a01b038316301415610a4a5760405162461bcd60e51b81526004016100d1906112e1565b6001600160e01b03198216600090815260208281526040808320546001600160a01b0387168452600180860190935290832054600160a01b90910461ffff169291610a9491611485565b9050808214610b9c576001600160a01b03851660009081526001840160205260408120805483908110610ad757634e487b7160e01b600052603260045260246000fd5b600091825260208083206008830401546001600160a01b038a168452600188019091526040909220805460079092166004026101000a90920460e01b925082919085908110610b3657634e487b7160e01b600052603260045260246000fd5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b031992909216825284905260409020805461ffff60a01b1916600160a01b61ffff8516021790555b6001600160a01b03851660009081526001840160205260409020805480610bd357634e487b7160e01b600052603160045260246000fd5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319861682528490526040902080546001600160b01b031916905580610097576002830154600090610c3f90600190611485565b6001600160a01b038716600090815260018087016020526040909120015490915061ffff16808214610d1a576000856002018381548110610c9057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546002870180546001600160a01b039092169250829184908110610ccf57634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815260018781019092526040902001805461ffff191661ffff83161790555b84600201805480610d3b57634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03891682526001878101909152604090912001805461ffff1916905550505050505050565b80356001600160a01b0381168114610da457600080fd5b919050565b600082601f830112610db9578081fd5b81356020610dce610dc983611461565b611437565b8281528181019085830183850287018401881015610dea578586fd5b855b85811015610e1d5781356001600160e01b031981168114610e0b578788fd5b84529284019290840190600101610dec565b5090979650505050505050565b600080600080600060608688031215610e41578081fd5b853567ffffffffffffffff80821115610e58578283fd5b818801915088601f830112610e6b578283fd5b813581811115610e79578384fd5b60208a818284028601011115610e8d578485fd5b8084019850819750610ea0818b01610d8d565b965060408a0135935082841115610eb5578485fd5b838a0193508a601f850112610ec8578485fd5b8335915082821115610ed8578485fd5b8a81838601011115610ee8578485fd5b979a96995094975050909401935090919050565b6001600160a01b03169052565b60008151808452610f21816020860160208601611563565b601f01601f19169290920160200192915050565b60008251610f47818460208701611563565b9190910192915050565b606080825284518282018190526000919060809081850190602080820287018401818b01875b8481101561101b57898303607f19018652815180516001600160a01b03168452848101518985019060038110610fbb57634e487b7160e01b8c52602160045260248cfd5b858701526040918201519185018a9052815190819052908501908a90898601905b808310156110065783516001600160e01b0319168252928701926001929092019190870190610fdc565b50978601979450505090830190600101610f77565b50506110298289018b610efc565b878103604089015261103b818a610f09565b9b9a5050505050505050505050565b60006020825261105d6020830184610f09565b9392505050565b6020808252603c908201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860408201527f3029206275745f63616c6c64617461206973206e6f7420656d70747900000000606082015260800190565b60208082526026908201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656040820152651d995c9d195960d21b606082015260800190565b60208082526022908201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60408201526132b960f11b606082015260800190565b6020808252602b908201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660408201526a1858d95d081d1bc818dd5d60aa1b606082015260800190565b60208082526037908201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360408201527f74696f6e207468617420646f65736e2774206578697374000000000000000000606082015260800190565b60208082526027908201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756040820152663a20b1ba34b7b760c91b606082015260800190565b6020808252602c908201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260408201526b65206164647265737328302960a01b606082015260800190565b6020808252603d908201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460408201527f7920627574205f696e6974206973206e6f742061646472657373283029000000606082015260800190565b6020808252602e908201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560408201526d3a30b1363290333ab731ba34b7b760911b606082015260800190565b60208082526035908201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6040820152746e207468617420616c72656164792065786973747360581b606082015260800190565b60208082526038908201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60408201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000606082015260800190565b60208082526036908201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604082015275657373206d757374206265206164647265737328302960501b606082015260800190565b60405181810167ffffffffffffffff81118282101715611459576114596115e2565b604052919050565b600067ffffffffffffffff82111561147b5761147b6115e2565b5060209081020190565b600082821015611497576114976115cc565b500390565b60006114aa610dc984611461565b8381526020808201919084845b87811015611557578135870160608082360312156114d3578788fd5b604080519182019167ffffffffffffffff80841182851017156114f8576114f86115e2565b83835261150485610d8d565b825287850135935060038410611518578a8bfd5b83888301528285013593508084111561152f578a8bfd5b5061153c36848601610da9565b918101919091528752505093820193908201906001016114b7565b50919695505050505050565b60005b8381101561157e578181015183820152602001611566565b838111156108a15750506000910152565b600061ffff808316818114156115a7576115a76115cc565b6001019392505050565b60006000198214156115c5576115c56115cc565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a26469706673582212201ca7699750f47fd35668f114ae460fec43f952251693f7aa61b2cfe9bbb9524064736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
          "_diamondCut": "Contains the facet addresses and function selectors",
          "_init": "The address of the contract or facet to execute _calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}