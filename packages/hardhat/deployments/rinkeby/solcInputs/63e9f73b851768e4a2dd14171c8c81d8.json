{
  "language": "Solidity",
  "sources": {
    "src/ChallengeDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n* \n* Implementation of a diamond.\n/******************************************************************************/\n\nimport \"./interfaces/IERC1155MetadataURI.sol\";\nimport \"./interfaces/IERC165.sol\";\nimport \"./libraries/LibChallengeStorage.sol\";\nimport \"./libraries/LibDiamond.sol\";\nimport \"./interfaces/IDiamondLoupe.sol\";\nimport \"./interfaces/IDiamondCut.sol\";\nimport \"./interfaces/IERC173.sol\";\nimport {LibSignatureChecker} from \"./libraries/LibSignatureChecker.sol\";\n\ncontract ChallengeDiamond {\n    ChallengeStorage cs;\n    \n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    struct DiamondArgs {\n        address owner;\n        address dao;\n    }\n\n    constructor(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        DiamondArgs memory _args\n    ) payable {\n        LibDiamond.diamondCut(_diamondCut, address(0), new bytes(0));\n        LibDiamond.setContractOwner(_args.owner);\n\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n\n        cs.dao = _args.dao;\n        LibSignatureChecker.setCheckSignatureFlag(true);\n        LibChallengeStorage.setAthleteTake(1);\n\n        // adding ERC165 data\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\n\n        // ERC1155\n        // ERC165 identifier for the main token standard.\n        ds.supportedInterfaces[0xd9b67a26] = true;\n\n        // ERC1155\n        // ERC1155Metadata_URI\n        ds.supportedInterfaces[IERC1155MetadataURI.uri.selector] = true;\n    }\n\n    // Find facet for function that is called and execute the\n    // function if a facet is found and return any value.\n    fallback() external payable {\n        LibDiamond.DiamondStorage storage ds;\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\n        require(facet != address(0), \"Diamond: Function does not exist\");\n        assembly {\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            switch result\n                case 0 {\n                    revert(0, returndatasize())\n                }\n                default {\n                    return(0, returndatasize())\n                }\n        }\n    }\n}\n"
    },
    "src/interfaces/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "src/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/libraries/LibChallengeStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../utils/Counters.sol\";\nimport \"../utils/EnumerableSet.sol\";\nimport \"./LibDiamond.sol\";\nimport \"./LibBaseRelayRecipient.sol\";\n\nenum Status {Open, Closed, Refund, Failed, Succeed}\n\nstruct Challenge {\n    uint256 id;\n    address payable athlete;\n    string jsonUrl;\n    string challengeUrl;\n    uint256 teamCount;\n    uint256 challengePrice;\n    Counters.Counter challengePriceNonce;\n    uint256 limit;\n    Status status;\n    uint256 donatedFunds;\n}\n\nstruct ChallengeToken {\n    uint256 id;\n    bytes signature;\n    uint256 price;\n    Counters.Counter priceNonce;\n    Challenge challenge;\n}\n\nstruct ChallengeStorage {\n    address dao;\n    bool checkSignatureFlag;\n    address challengeFacet;\n    address challengeTokenFacet;\n    address trustedForwarder;\n    uint256 athleteTake;\n    Counters.Counter totalChallenges;\n    mapping(address => EnumerableSet.UintSet) _athleteChallenges;\n    mapping(address => mapping(address => uint256)) donations; //Donator address => Donation token => donation amount\n    mapping(address => uint256) donationTotals;\n    mapping(string => uint256) challengeIdByChallengeUrl;\n    mapping(uint256 => Challenge) _challengeById;\n    mapping(uint256 => ChallengeToken) _challengeTokenById;\n    mapping(string => EnumerableSet.UintSet) _challengeTokens;\n    mapping(uint256 => string) tokenChallenge;\n    mapping(uint256 => Counters.Counter) _tokenIndexByChallengeId;\n}\n\nlibrary LibChallengeStorage {\n    function diamondStorage() internal pure returns (ChallengeStorage storage ds) {\n        assembly {\n            ds.slot := 0\n        }\n    }\n\n    function setAthleteTake(uint256 _take) public {\n        LibDiamond.enforceIsContractOwner();\n        require(_take < 100, \"take is more than 99 percent\");\n        diamondStorage().athleteTake = _take;\n    }\n}\n\ncontract Modifiers {\n    ChallengeStorage internal s;\n\n    modifier onlyOwner {\n        LibDiamond.enforceIsContractOwner();\n        _;\n    }\n\n    modifier onlyDao {\n        address sender = LibBaseRelayRecipient._msgSender();\n        require(sender == s.dao, \"Only DAO can call this function\");\n        _;\n    }\n\n    modifier onlyDaoOrOwner {\n        address sender = LibBaseRelayRecipient._msgSender();\n        require(sender == s.dao || sender == LibDiamond.contractOwner(), \"LibChallengeStorage: Do not have access\");\n        _;\n    }\n}"
    },
    "src/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nimport \"../interfaces/IDiamondCut.sol\";\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // uint16 selectorCount = uint16(diamondStorage().selectors.length);\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint16 selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n            ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length);\n            ds.facetAddresses.push(_facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector);\n            ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress;\n            ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition;\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint16 selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n            ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length);\n            ds.facetAddresses.push(_facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(oldFacetAddress, selector);\n            // add function\n            ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition;\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector);\n            ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress;\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(oldFacetAddress, selector);\n        }\n    }\n\n    function removeFunction(address _facetAddress, bytes4 _selector) internal {\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}"
    },
    "src/interfaces/IDiamondLoupe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\n// A loupe is a small magnifying glass used to look at diamonds.\n// These functions look at diamonds\ninterface IDiamondLoupe {\n    /// These functions are expected to be called frequently\n    /// by tools.\n\n    struct Facet {\n        address facetAddress;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Gets all facet addresses and their four byte function selectors.\n    /// @return facets_ Facet\n    function facets() external view returns (Facet[] memory facets_);\n\n    /// @notice Gets all the function selectors supported by a specific facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\n}\n"
    },
    "src/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}"
    },
    "src/interfaces/IERC173.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title ERC-173 Contract Ownership Standard\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\n/* is ERC165 */\ninterface IERC173 {\n    /// @dev This emits when ownership of a contract changes.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Get the address of the owner\n    /// @return owner_ The address of the owner.\n    function owner() external view returns (address owner_);\n\n    /// @notice Set the address of the new owner of the contract\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\n    /// @param _newOwner The address of the new owner of the contract\n    function transferOwnership(address _newOwner) external;\n}"
    },
    "src/libraries/LibSignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.8.0;\n\nimport {ChallengeStorage, LibChallengeStorage} from \"./LibChallengeStorage.sol\";\nimport {LibDiamond} from \"./LibDiamond.sol\";\nimport \"../cryptography/ECDSA.sol\";\nimport \"../utils/Address.sol\";\nimport \"../IERC1271.sol\";\n\nbytes4 constant _INTERFACE_ID_ERC1271 = 0x1626ba7e;\nbytes4 constant _ERC1271FAILVALUE = 0xffffffff;\n\nlibrary LibSignatureChecker {\n    using ECDSA for bytes32;\n    using Address for address;\n\n\n    function setCheckSignatureFlag(bool newFlag) internal {\n      LibDiamond.enforceIsContractOwner();\n      ChallengeStorage storage s = LibChallengeStorage.diamondStorage();\n      s.checkSignatureFlag = newFlag;\n    }\n\n    function getSigner(bytes32 signedHash, bytes memory signature) internal pure returns (address)\n    {\n        return signedHash.toEthSignedMessageHash().recover(signature);\n    }\n\n    function checkSignature(bytes32 signedHash, bytes memory signature, address checkAddress) internal view returns (bool) {\n      if(checkAddress.isContract()) {\n        return IERC1271(checkAddress).isValidSignature(signedHash, signature) == _INTERFACE_ID_ERC1271;\n      } else {\n        return getSigner(signedHash, signature) == checkAddress;\n      }\n    }\n\n}"
    },
    "src/interfaces/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "src/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n}\n"
    },
    "src/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "src/libraries/LibBaseRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier:MIT\n// solhint-disable no-inline-assembly\npragma solidity ^0.8.0;\n\nimport {ChallengeStorage, LibChallengeStorage} from \"./LibChallengeStorage.sol\";\n\n/**\n * A base contract to be inherited by any contract that want to receive relayed transactions\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\n */\nlibrary LibBaseRelayRecipient {\n\n    function isTrustedForwarder(address forwarder)\n        internal\n        view\n        returns (bool)\n    {\n        ChallengeStorage storage s = LibChallengeStorage.diamondStorage();\n        return forwarder == s.trustedForwarder;\n    }\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender()\n        internal\n        view\n        returns (address payable ret)\n    {\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            \n            assembly {\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n            ret = payable(ret);\n        } else {\n            return payable(msg.sender);\n        }\n    }\n\n    /**\n     * return the msg.data of this call.\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\n     * of the msg.data - so this method will strip those 20 bytes off.\n     * otherwise, return `msg.data`\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\n     * signing or hashing the\n     */\n    function _msgData()\n        internal\n        view\n        returns (bytes memory ret)\n    {\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n            return msg.data[0:msg.data.length - 20];\n        } else {\n            return msg.data;\n        }\n    }\n}"
    },
    "src/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n"
    },
    "src/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    function toString(address account) internal pure returns (string memory) {\n        bytes32 value = bytes32(uint256(uint160(account)));\n        bytes memory alphabet = \"0123456789abcdef\";\n        bytes memory chars = new bytes(42);\n\n        chars[0] = \"0\";\n        chars[1] = \"x\";\n\n        for (uint256 i = 0; i < 20; i++) {\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\n        }\n\n        return string(chars);\n    }\n\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) =\n            target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "src/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @notice ERC-1271: Standard Signature Validation Method for Contracts\n */\ninterface IERC1271 {\n\n//    bytes4 internal constant _ERC1271MAGICVALUE = 0x1626ba7e;\n//    bytes4 internal constant _ERC1271FAILVALUE = 0xffffffff;\n\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param _hash hash of the data signed//Arbitrary length data signed on the behalf of address(this)\n     * @param _signature Signature byte array associated with _data\n     *\n     * @return magicValue either 0x1626ba7e on success or 0xffffffff failure\n     */\n    function isValidSignature(\n        bytes32 _hash, //bytes memory _data,\n        bytes calldata _signature\n    )\n    external\n    view\n    returns (bytes4 magicValue);\n}"
    },
    "src/ChallengeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma experimental ABIEncoderV2;\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IDiamondCut.sol\";\nimport { ChallengeDiamond } from \"./ChallengeDiamond.sol\";\n\ncontract ChallengeFactory {\n\n    IDiamondCut.FacetCut[] diamondCut;\n    ChallengeDiamond.DiamondArgs args; \n\n    event ChallengeDeployed(address indexed challengeAddr);\n\n    constructor(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        ChallengeDiamond.DiamondArgs memory _args\n    ) {\n        for (uint i = 0; i < _diamondCut.length; i++) {\n            diamondCut.push(_diamondCut[i]);\n        }\n        args = _args;\n    }\n\n    function deployChallenge() external returns(address) {\n        IDiamondCut.FacetCut[] memory _diamondCut = diamondCut;\n        ChallengeDiamond.DiamondArgs memory _args = args;\n        ChallengeDiamond challenge = new ChallengeDiamond(_diamondCut, _args);\n        emit ChallengeDeployed(address(challenge));\n        return address(challenge);\n    }\n}"
    },
    "src/facets/DiamondLoupeFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nimport \"../interfaces/IDiamondCut.sol\";\nimport {LibDiamond} from \"../libraries/LibDiamond.sol\";\nimport {IDiamondLoupe} from \"../interfaces/IDiamondLoupe.sol\";\nimport {IERC165} from \"../interfaces/IERC165.sol\";\n\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\n    // Diamond Loupe Functions\n    ////////////////////////////////////////////////////////////////////\n    /// These functions are expected to be called frequently by tools.\n    //\n    // struct Facet {\n    //     address facetAddress;\n    //     bytes4[] functionSelectors;\n    // }\n\n    /// @notice Gets all facets and their selectors.\n    /// @return facets_ Facet\n    function facets() external override view returns (Facet[] memory facets_) {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        uint256 numFacets = ds.facetAddresses.length;\n        facets_ = new Facet[](numFacets);\n        for (uint256 i; i < numFacets; i++) {\n            address facetAddress_ = ds.facetAddresses[i];\n            facets_[i].facetAddress = facetAddress_;\n            facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress_].functionSelectors;\n        }\n    }\n\n    /// @notice Gets all the function selectors provided by a facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory facetFunctionSelectors_) {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\n    }\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        facetAddresses_ = ds.facetAddresses;\n    }\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\n    }\n\n    // This implements ERC-165.\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        return ds.supportedInterfaces[_interfaceId];\n    }\n}"
    },
    "src/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}"
    },
    "src/interfaces/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC165.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}"
    },
    "src/libraries/ERC1155Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// TODO: remove ERC165\n\nimport \"../interfaces/IERC1155.sol\";\nimport \"../interfaces/IERC1155Receiver.sol\";\nimport \"./ERC1155BaseStorage.sol\";\nimport {LibDiamond} from \"./LibDiamond.sol\";\nimport \"../utils/Address.sol\";\n\nabstract contract ERC1155Base is IERC1155 {\n    using Address for address;\n\n    function balanceOf(address account, uint256 id)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        require(\n            account != address(0),\n            \"ERC1155: balance query for the zero address\"\n        );\n        return ERC1155BaseStorage.layout().balances[id][account];\n    }\n\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        override\n        returns (uint256[] memory)\n    {\n        require(\n            accounts.length == ids.length,\n            \"ERC1155: accounts and ids length mismatch\"\n        );\n\n        mapping(uint256 => mapping(address => uint256)) storage balances =\n            ERC1155BaseStorage.layout().balances;\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i; i < accounts.length; i++) {\n            require(\n                accounts[i] != address(0),\n                \"ERC1155: batch balance query for the zero address\"\n            );\n            batchBalances[i] = balances[ids[i]][accounts[i]];\n        }\n\n        return batchBalances;\n    }\n\n    function isApprovedForAll(address account, address operator)\n        public\n        view\n        override\n        returns (bool)\n    {\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\n    }\n\n    function setApprovalForAll(address operator, bool status) public override {\n        require(\n            msg.sender != operator,\n            \"ERC1155: setting approval status for self\"\n        );\n        ERC1155BaseStorage.layout().operatorApprovals[msg.sender][\n            operator\n        ] = status;\n        emit ApprovalForAll(msg.sender, operator, status);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public override {\n        require(\n            from == msg.sender || isApprovedForAll(from, msg.sender),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _doSafeTransferAcceptanceCheck(msg.sender, from, to, id, amount, data);\n        _transfer(msg.sender, from, to, id, amount, data);\n    }\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public override {\n        require(\n            ids.length == amounts.length,\n            \"ERC1155: ids and amounts length mismatch\"\n        );\n        require(\n            from == msg.sender || isApprovedForAll(from, msg.sender),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _doSafeBatchTransferAcceptanceCheck(\n            msg.sender,\n            from,\n            to,\n            ids,\n            amounts,\n            data\n        );\n        _transferBatch(msg.sender, from, to, ids, amounts, data);\n    }\n\n    function _mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        _beforeTokenTransfer(\n            msg.sender,\n            address(0),\n            account,\n            _asSingletonArray(id),\n            _asSingletonArray(amount),\n            data\n        );\n\n        mapping(address => uint256) storage balances =\n            ERC1155BaseStorage.layout().balances[id];\n        balances[account] += amount;\n\n        emit TransferSingle(msg.sender, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(\n            msg.sender,\n            address(0),\n            account,\n            id,\n            amount,\n            data\n        );\n    }\n\n    function _mintBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n        require(\n            ids.length == amounts.length,\n            \"ERC1155: ids and amounts length mismatch\"\n        );\n\n        _beforeTokenTransfer(\n            msg.sender,\n            address(0),\n            account,\n            ids,\n            amounts,\n            data\n        );\n\n        mapping(uint256 => mapping(address => uint256)) storage balances =\n            ERC1155BaseStorage.layout().balances;\n\n        for (uint256 i; i < ids.length; i++) {\n            uint256 id = ids[i];\n            balances[id][account] += amounts[i];\n        }\n\n        emit TransferBatch(msg.sender, address(0), account, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(\n            msg.sender,\n            address(0),\n            account,\n            ids,\n            amounts,\n            data\n        );\n    }\n\n    function _burn(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) internal {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        _beforeTokenTransfer(\n            msg.sender,\n            account,\n            address(0),\n            _asSingletonArray(id),\n            _asSingletonArray(amount),\n            \"\"\n        );\n\n        mapping(address => uint256) storage balances =\n            ERC1155BaseStorage.layout().balances[id];\n        require(\n            balances[account] >= amount,\n            \"ERC1155: burn amount exceeds balances\"\n        );\n        balances[account] -= amount;\n\n        emit TransferSingle(msg.sender, account, address(0), id, amount);\n    }\n\n    function _burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(\n            ids.length == amounts.length,\n            \"ERC1155: ids and amounts length mismatch\"\n        );\n\n        _beforeTokenTransfer(msg.sender, account, address(0), ids, amounts, \"\");\n\n        mapping(uint256 => mapping(address => uint256)) storage balances =\n            ERC1155BaseStorage.layout().balances;\n\n        for (uint256 i; i < ids.length; i++) {\n            uint256 id = ids[i];\n            require(\n                balances[id][account] >= amounts[i],\n                \"ERC1155: burn amount exceeds balance\"\n            );\n            balances[id][account] -= amounts[i];\n        }\n\n        emit TransferBatch(msg.sender, account, address(0), ids, amounts);\n    }\n\n    function _transfer(\n        address operator,\n        address sender,\n        address recipient,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(\n            recipient != address(0),\n            \"ERC1155: transfer to the zero address\"\n        );\n\n        _beforeTokenTransfer(\n            operator,\n            sender,\n            recipient,\n            _asSingletonArray(id),\n            _asSingletonArray(amount),\n            data\n        );\n\n        mapping(uint256 => mapping(address => uint256)) storage balances =\n            ERC1155BaseStorage.layout().balances;\n\n        // TODO: error message\n        // balances[id][sender] = balances[id][sender].sub(amount, 'ERC1155: insufficient balances for transfer');\n        balances[id][sender] -= amount;\n        balances[id][recipient] += amount;\n\n        emit TransferSingle(operator, sender, recipient, id, amount);\n    }\n\n    function _transferBatch(\n        address operator,\n        address sender,\n        address recipient,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(\n            recipient != address(0),\n            \"ERC1155: transfer to the zero address\"\n        );\n\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\n\n        mapping(uint256 => mapping(address => uint256)) storage balances =\n            ERC1155BaseStorage.layout().balances;\n\n        for (uint256 i; i < ids.length; i++) {\n            uint256 token = ids[i];\n            uint256 amount = amounts[i];\n            // TODO: error message\n            // balances[id][sender] = balances[id][sender].sub(amount, 'ERC1155: insufficient balances for transfer');\n            balances[token][sender] -= amount;\n            balances[token][recipient] += amount;\n        }\n\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\n    }\n\n    function _asSingletonArray(uint256 element)\n        private\n        pure\n        returns (uint256[] memory)\n    {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n        return array;\n    }\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try\n                IERC1155Receiver(to).onERC1155Received(\n                    operator,\n                    from,\n                    id,\n                    amount,\n                    data\n                )\n            returns (bytes4 response) {\n                if (\n                    response != IERC1155Receiver(to).onERC1155Received.selector\n                ) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try\n                IERC1155Receiver(to).onERC1155BatchReceived(\n                    operator,\n                    from,\n                    ids,\n                    amounts,\n                    data\n                )\n            returns (bytes4 response) {\n                if (\n                    response !=\n                    IERC1155Receiver(to).onERC1155BatchReceived.selector\n                ) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    // This implements ERC-165.\n    function supportsInterface(bytes4 _interfaceId)\n        external\n        view\n        override\n        returns (bool)\n    {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        return ds.supportedInterfaces[_interfaceId];\n    }\n}\n"
    },
    "src/libraries/ERC1155BaseStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary ERC1155BaseStorage {\n    bytes32 internal constant STORAGE_SLOT =\n        keccak256(\"solidstate.contracts.storage.ERC1155Base\");\n\n    struct Layout {\n        mapping(uint256 => mapping(address => uint256)) balances;\n        mapping(uint256 => address) nfOwners;\n        mapping(address => mapping(address => bool)) operatorApprovals;\n    }\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/libraries/ERC1155Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport '../utils/EnumerableSet.sol';\nimport './ERC1155Base.sol';\nimport './ERC1155EnumerableStorage.sol';\n\ncontract ERC1155Enumerable is ERC1155Base {\n  using EnumerableSet for EnumerableSet.AddressSet;\n  using EnumerableSet for EnumerableSet.UintSet;\n\n  function totalSupply (uint id) public view returns (uint) {\n    return ERC1155EnumerableStorage.layout().totalSupply[id];\n  }\n\n  function totalHolders (uint id) public view returns (uint) {\n    return ERC1155EnumerableStorage.layout().accountsByToken[id].length();\n  }\n\n  function accountsByToken (uint id) public view returns (address[] memory) {\n    EnumerableSet.AddressSet storage accounts = ERC1155EnumerableStorage.layout().accountsByToken[id];\n\n    address[] memory addresses = new address[](accounts.length());\n\n    for (uint i; i < accounts.length(); i++) {\n      addresses[i] = accounts.at(i);\n    }\n\n    return addresses;\n  }\n\n  function tokensByAccount (address account) public view returns (uint[] memory) {\n    EnumerableSet.UintSet storage tokens = ERC1155EnumerableStorage.layout().tokensByAccount[account];\n\n    uint[] memory ids = new uint[](tokens.length());\n\n    for (uint i; i < tokens.length(); i++) {\n      ids[i] = tokens.at(i);\n    }\n\n    return ids;\n  }\n\n  function _beforeTokenTransfer (\n    address operator,\n    address from,\n    address to,\n    uint[] memory ids,\n    uint[] memory amounts,\n    bytes memory data\n  ) virtual override internal {\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n    if (from != to) {\n      ERC1155EnumerableStorage.Layout storage l = ERC1155EnumerableStorage.layout();\n      mapping (uint => EnumerableSet.AddressSet) storage tokenAccounts = l.accountsByToken;\n      EnumerableSet.UintSet storage fromTokens = l.tokensByAccount[from];\n      EnumerableSet.UintSet storage toTokens = l.tokensByAccount[to];\n\n      for (uint i; i < ids.length; i++) {\n        uint amount = amounts[i];\n\n        if (amount > 0) {\n          uint id = ids[i];\n\n          if (from == address(0)) {\n            l.totalSupply[id] += amount;\n          } else if (balanceOf(from, id) == amount) {\n            tokenAccounts[id].remove(from);\n            fromTokens.remove(id);\n          }\n\n          if (to == address(0)) {\n            l.totalSupply[id] -= amount;\n          } else if (balanceOf(to, id) == 0) {\n            tokenAccounts[id].add(to);\n            toTokens.add(id);\n          }\n        }\n      }\n    }\n  }\n}\n"
    },
    "src/libraries/ERC1155EnumerableStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport '../utils/EnumerableSet.sol';\n\nlibrary ERC1155EnumerableStorage {\n  bytes32 internal constant STORAGE_SLOT = keccak256(\n    'solidstate.contracts.storage.ERC1155Enumerable'\n  );\n\n  struct Layout {\n    mapping (uint => uint) totalSupply;\n    mapping (uint => EnumerableSet.AddressSet) accountsByToken;\n    mapping (address => EnumerableSet.UintSet) tokensByAccount;\n  }\n\n  function layout () internal pure returns (Layout storage l) {\n    bytes32 slot = STORAGE_SLOT;\n    assembly { l.slot := slot }\n  }\n}"
    },
    "src/facets/ChallengeFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Counters.sol\";\nimport \"../utils/SafeMath.sol\";\nimport \"../utils/EnumerableSet.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../utils/SafeERC20.sol\";\nimport \"../interfaces/IChallengeDiamond.sol\";\nimport \"../interfaces/IChallengeToken.sol\";\nimport \"../libraries/LibDiamond.sol\";\nimport {ChallengeStorage} from \"../libraries/LibChallengeStorage.sol\";\nimport {LibBaseRelayRecipient} from \"../libraries/LibBaseRelayRecipient.sol\";\nimport {LibSignatureChecker} from \"../libraries/LibSignatureChecker.sol\";\nimport {ChallengeTokenFacet} from \"./ChallengeTokenFacet.sol\";\nimport \"../libraries/ERC1155BaseStorage.sol\";\n\n/**\n * Deployed by an athlete\n * A user can make a challenge for themself by calling createChallenge()\n * Users can then add donations to this contract by calling donate()\n * Challenges can be resolved by calling resolveChallenge() from\n * the Shenanigan DAO Agent.\n */\n\ncontract ChallengeFacet {\n    ChallengeStorage internal cs;\n\n    using SafeERC20 for IERC20;\n    using Counters for Counters.Counter;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using SafeMath for uint256;\n\n    //@TODO Move constants to storage\n    string private constant ERROR_ETH_VALUE_MISMATCH =\n        \"TOKEN_REQUEST_ETH_VALUE_MISMATCH\";\n    string private constant ERROR_ETH_TRANSFER_FAILED =\n        \"TOKEN_REQUEST_ETH_TRANSFER_FAILED\";\n\n    event CreateChallenge(\n        uint256 id,\n        address athlete,\n        string challengeUrl,\n        string jsonUrl,\n        uint256 teamCount\n    );\n    event Donate(\n        uint256 id,\n        string challengeUrl,\n        address donator,\n        uint256 amount,\n        address tokenAddress\n    );\n    event Withdraw(\n        uint256 id,\n        string challengeUrl,\n        address challenger,\n        uint256 amount,\n        address tokenAddress\n    );\n    event newChallengePrice(string challengeUrl, uint256 price);\n\n    event ChallengeResolved(uint256 id, Status status);\n\n    modifier onlyShenanigan {\n        require(\n            LibBaseRelayRecipient._msgSender() == cs.dao,\n            \"Only Shenanigan address can update this value.\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Create a challenge\n     * @param _challengeUrl IPFS URL with the challenge livestream video\n     * @param _jsonUrl IPFS URL with the challenge JSON data\n     * @param _teamCount Total number of unique options for the challenge\n     * @param _athlete address of challenger\n     */\n    function _createChallenge(\n        string memory _challengeUrl,\n        string memory _jsonUrl,\n        uint256 _teamCount,\n        uint256 _limit,\n        address payable _athlete\n    ) internal returns (uint256 id_) {\n        cs.totalChallenges.increment();\n        id_ = cs.totalChallenges.current();\n        if (id_ > 1) {\n            for (uint256 i = 0; i < cs.totalChallenges.current(); i++) {\n                //@TODO STATUS is confusing OPEN, CLOSED are about donations, the other statuses are about results\n                require(\n                    !(cs._challengeById[id_ - i].status == Status.Open) &&\n                        !(cs._challengeById[id_ - i].status == Status.Closed),\n                    \"Previous challenge has not been fulfilled\"\n                );\n            }\n        }\n        Challenge memory challenge = cs._challengeById[id_];\n\n        challenge.id = id_;\n        challenge.athlete = _athlete;\n        challenge.challengeUrl = _challengeUrl;\n        challenge.jsonUrl = _jsonUrl;\n        challenge.teamCount = _teamCount;\n        challenge.limit = _limit;\n        challenge.status = Status.Open;\n\n        cs.challengeIdByChallengeUrl[_challengeUrl] = id_;\n\n        emit CreateChallenge(\n            challenge.id,\n            challenge.athlete,\n            challenge.challengeUrl,\n            challenge.jsonUrl,\n            challenge.teamCount\n        );\n    }\n\n    /**\n     * @notice Public createChallenge function\n     * @param _challengeUrl IPFS URL with the challenge Livestream video\n     * @param _jsonUrl IPFS URL with the challenge JSON data\n     * @param _teamCount Total number of unique options for the challenge\n     */\n    function createChallenge(\n        string memory _challengeUrl,\n        string memory _jsonUrl,\n        uint256 _teamCount,\n        uint256 _limit\n    ) public returns (uint256 id_) {\n        LibDiamond.enforceIsContractOwner();\n        require(\n            !(cs.challengeIdByChallengeUrl[_challengeUrl] > 0),\n            \"this challenge already exists!\"\n        );\n        require(_teamCount > 1, \"Challenge must have at least two teams\");\n        require(_limit > 0, \"Challenge must mint at least one Challenge Token\");\n\n        id_ = _createChallenge(\n            _challengeUrl,\n            _jsonUrl,\n            _teamCount,\n            _limit,\n            LibBaseRelayRecipient._msgSender()\n        );\n    }\n\n    // /**\n    //  * @notice Creates a challenge from ENS signature\n    //  * @param _challengeUrl IPFS URL with the challenge Livestream video\n    //  * @param _jsonUrl IPFS URL with the challenge JSON data\n    //  * @param _teamCount Total number of unique options for the challenge\n    //  * @param _athlete address of challenger\n    //  * @param _signature ENS bytecode\n    //  */\n    // function createChallengeFromSignature(\n    //     string memory _challengeUrl,\n    //     string memory _jsonUrl,\n    //     uint256 _teamCount,\n    //     address payable _athlete,\n    //     bytes memory _signature\n    // ) public returns (uint256) {\n    //     require(\n    //         !(challengeIdByChallengeUrl[_challengeUrl] > 0),\n    //         \"this challenge already exists!\"\n    //     );\n\n    //     require(_athlete != address(0), \"Athlete must be specified.\");\n    //     bytes32 messageHash = keccak256(\n    //         abi.encodePacked(\n    //             bytes1(0x19),\n    //             bytes1(0),\n    //             address(this),\n    //             _athlete,\n    //             _challengeUrl,\n    //             _jsonUrl,\n    //             _teamCount\n    //         )\n    //     );\n    //     bool isAthleteSignature = checkSignature(\n    //         messageHash,\n    //         _signature,\n    //         _athlete\n    //     );\n    //     require(\n    //         isAthleteSignature || !checkSignatureFlag,\n    //         \"Athlete did not sign this challenge\"\n    //     );\n\n    //     uint256 challengeId = _createChallenge(\n    //         _challengeUrl,\n    //         _jsonUrl,\n    //         _teamCount,\n    //         _athlete\n    //     );\n\n    //     _challengeById[challengeId].signature = _signature;\n\n    //     return challengeId;\n    // }\n\n    function _setPrice(uint256 _id, uint256 _price) private returns (uint256) {\n        cs._challengeById[_id].challengePrice = _price;\n        cs._challengeById[_id].challengePriceNonce.increment();\n        emit newChallengePrice(cs._challengeById[_id].challengeUrl, _price);\n        return _price;\n    }\n\n    function setPrice(string memory challengeUrl, uint256 price)\n        public\n        returns (uint256)\n    {\n        uint256 _id = cs.challengeIdByChallengeUrl[challengeUrl];\n        require(_id > 0, \"this challenge does not exist!\");\n        Challenge memory challenge = cs._challengeById[_id];\n        //@TODO use OwnershipFacet LibDiamond.enforceContractOwner\n        require(\n            challenge.athlete == LibBaseRelayRecipient._msgSender(),\n            \"only the athlete can set the price!\"\n        );\n\n        return _setPrice(challenge.id, price);\n    }\n\n    function setPriceFromSignature(\n        string memory challengeUrl,\n        uint256 price,\n        bytes memory signature\n    ) public returns (uint256) {\n        uint256 _id = cs.challengeIdByChallengeUrl[challengeUrl];\n        require(_id > 0, \"this challenge does not exist!\");\n        Challenge storage challenge = cs._challengeById[_id];\n        bytes32 messageHash =\n            keccak256(\n                abi.encodePacked(\n                    bytes1(0x19),\n                    bytes1(0),\n                    address(this),\n                    challengeUrl,\n                    price,\n                    challenge.challengePriceNonce.current()\n                )\n            );\n            //@TODO Athlete not artist\n        bool isArtistSignature =\n            LibSignatureChecker.checkSignature(messageHash, signature, challenge.athlete);\n        require(\n            isArtistSignature || !cs.checkSignatureFlag,\n            \"Athlete did not sign this price\"\n        );\n\n        return _setPrice(challenge.id, price);\n    }\n\n    function challengeInfoById(uint256 id)\n        public\n        view\n        returns (Challenge memory challenge_)\n    {\n        require(\n            id > 0 && id <= cs.totalChallenges.current(),\n            \"this challenge does not exist!\"\n        );\n        challenge_ = cs._challengeById[id];\n    }\n\n    function challengeInfoByChallengeUrl(string memory challengeUrl)\n        public\n        view\n        returns (Challenge memory)\n    {\n        uint256 _id = cs.challengeIdByChallengeUrl[challengeUrl];\n\n        return challengeInfoById(_id);\n    }\n\n    /**\n     * @notice Users can donate to a challenge\n     * @param _challengeUrl IPFS URL of the challenge livestream\n     * @param _donationAmount Amount to donate\n     * @param _depositToken Token Address being donated\n     */\n    function donate(\n        string memory _challengeUrl,\n        uint256 _donationAmount,\n        address _depositToken\n    ) public payable returns (uint256) {\n        require(_donationAmount > 0);\n        uint256 _id = cs.challengeIdByChallengeUrl[_challengeUrl];\n        require(_id > 0, \"this chalenge does not exist!\");\n        address _donator = LibBaseRelayRecipient._msgSender();\n\n        if (_depositToken == address(0)) {\n            require(msg.value == _donationAmount, ERROR_ETH_VALUE_MISMATCH);\n        } else {\n            IERC20(_depositToken).safeTransferFrom(\n                _donator,\n                address(this),\n                _donationAmount\n            );\n        }\n\n        cs.donations[_donator][_depositToken] += _donationAmount;\n        cs.donationTotals[_depositToken] += _donationAmount;\n\n        emit Donate(\n            _id,\n            _challengeUrl,\n            _donator,\n            _donationAmount,\n            _depositToken\n        );\n        return _id;\n    }\n\n    /**\n     * @notice User can retrieve their donation if the Challenge is deemed malicious and the Refund status is applied\n     * @param _challengeUrl IPFS URL of the challenge livestream\n     * @param _tokenAddresses Addresses of tokens being withdrawn\n     */\n    function withdrawDonation(\n        string memory _challengeUrl,\n        address[] memory _tokenAddresses\n    ) public {\n        uint256 _id = cs.challengeIdByChallengeUrl[_challengeUrl];\n        Challenge memory challenge = cs._challengeById[_id];\n        require(\n            challenge.status == Status.Refund,\n            \"Cannot withdraw donations unless refund is allowed\"\n        );\n        address payable _donator = LibBaseRelayRecipient._msgSender();\n\n        for (uint256 i = 0; i < _tokenAddresses.length; i++) {\n            uint256 donationAmount = cs.donations[_donator][_tokenAddresses[i]];\n            require(donationAmount > 0, \"One of the tokens has 0 amount\");\n            if (_tokenAddresses[i] == address(0)) {\n                _donator.transfer(donationAmount);\n            } else {\n                IERC20(_tokenAddresses[i]).safeTransferFrom(\n                    address(this),\n                    _donator,\n                    donationAmount\n                );\n            }\n            emit Withdraw(\n                _id,\n                _challengeUrl,\n                _donator,\n                donationAmount,\n                _tokenAddresses[i]\n            );\n        }\n    }\n\n    /**\n     * @notice Challenger can retrieve donations when challenge returns successful and the Succeed status is applied\n     * @param _challengeUrl IPFS URL of the challenge livestream\n     * @param _tokenAddresses Addresses of tokens being withdrawn\n     */\n    function withdrawBalance(\n        string memory _challengeUrl,\n        address[] memory _tokenAddresses\n    ) public {\n        LibDiamond.enforceIsContractOwner();\n        uint256 _id = cs.challengeIdByChallengeUrl[_challengeUrl];\n        Challenge memory challenge = cs._challengeById[_id];\n        address payable athlete = challenge.athlete;\n        require(\n            challenge.status == Status.Succeed,\n            \"Only succeeded challenges can be withdrawn from\"\n        );\n        for (uint256 i = 0; i < _tokenAddresses.length; i++) {\n            uint256 donationAmount = cs.donationTotals[_tokenAddresses[i]];\n            require(donationAmount > 0, \"One of the tokens has 0 amount\");\n            if (_tokenAddresses[i] == address(0)) {\n                athlete.transfer(donationAmount);\n            } else {\n                IERC20(_tokenAddresses[i]).safeTransferFrom(\n                    address(this),\n                    athlete,\n                    donationAmount\n                );\n            }\n            emit Withdraw(\n                _id,\n                _challengeUrl,\n                athlete,\n                donationAmount,\n                _tokenAddresses[i]\n            );\n        }\n    }\n\n    /**\n     * @notice The Shenanigan DAO Agent can call this function to finalize challenge results\n     * @param _challengeUrl IPFS URL of the challenge livestream\n     * @param _resolution integer representation of resolution results (1) Succeed, (2) Fail, (3) Refund\n     */\n    function resolveChallenge(\n        string memory _challengeUrl,\n        uint256 _resolution,\n        uint256 amount\n    ) public onlyShenanigan {\n        require(LibBaseRelayRecipient._msgSender() == cs.dao);\n\n        uint256 _id = cs.challengeIdByChallengeUrl[_challengeUrl];\n        Challenge memory challenge = cs._challengeById[_id];\n        require(amount < challenge.limit, \"Amount is larger than limit\");\n        if (_resolution == 1) {\n            challenge.status == Status.Succeed;\n        } else if (_resolution == 2) {\n            challenge.status == Status.Failed;\n        } else {\n            challenge.status == Status.Refund;\n        }\n\n        if (challenge.status != Status.Refund) {\n            ChallengeTokenFacet(address(this)).firstMint(\n                challenge.athlete,\n                challenge.challengeUrl,\n                challenge.jsonUrl,\n                \"\"\n            );\n        }\n\n        emit ChallengeResolved(_id, challenge.status);\n    }\n\n\n}\n"
    },
    "src/utils/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "src/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "src/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
    },
    "src/interfaces/IChallengeDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.8.0;\nimport \"../libraries/LibChallengeStorage.sol\";\n\ninterface IChallengeDiamond {\n\n    function createChallenge(\n        string calldata,\n        string calldata,\n        uint256\n    ) external returns (uint256);\n\n    function createChallengeFromSignature(\n        string calldata,\n        string calldata,\n        uint256,\n        address payable,\n        bytes calldata\n    ) external returns (uint256);\n\n    function donate(\n        string calldata,\n        uint256,\n        address\n    ) external payable returns (uint256);\n\n    function withdrawDonation(string calldata, address[] calldata) external;\n\n    function withdrawBalance(string calldata, address[] calldata) external;\n\n    function resolveChallenge(string calldata, uint256) external;\n\n    function challengeStats(uint256) external view returns (string memory);\n\n    function challengeInfoById(uint256)\n        external\n        view\n        returns (Challenge memory );\n\n    function challengeInfoByChallengeUrl(string calldata)\n        external\n        view\n        returns (Challenge memory);\n\n    function setPrice(string calldata, uint256, uint256) external returns (uint256);\n    function setPriceFromSignature(\n        string calldata,\n        uint256 ,\n        uint256 ,\n        bytes calldata \n    ) external returns (uint256);\n\n    function owner() external view returns (address);\n\n    function athleteTake() external view returns (uint256);\n\n\n    function challengeTokenCount(string calldata)\n        external\n        view\n        returns (uint256);\n\n    function firstMint(\n        address,\n        string calldata,\n        string calldata\n    ) external returns (uint256);\n\n    function mint(address, string calldata) external returns (uint256);\n\n    function lock(uint256) external;\n\n    function unlock(uint256, address) external;\n\n    function ownerOf(uint256) external view returns (address);\n\n    function tokenChallenge(uint256) external view returns (string memory);\n\n    function buyChallenge(string calldata, uint256, uint256, bytes calldata) external payable returns (uint256);\n\n    function buyToken(uint256) external payable;\n}\n"
    },
    "src/interfaces/IChallengeToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IChallengeToken {\n    function challengeTokenCount(string calldata)\n        external\n        view\n        returns (uint256);\n\n    function firstMint(\n        address,\n        string calldata,\n        string calldata,\n        string calldata\n    ) external returns (uint256);\n\n    function mint(address, string calldata) external returns (uint256);\n\n    function lock(uint256) external;\n\n    function unlock(uint256, address) external;\n\n    function ownerOf(uint256) external view returns (address);\n\n    function tokenChallenge(uint256) external view returns (string memory);\n\n    function buyChallenge(string calldata) external payable returns (uint256);\n\n    function buyToken(uint256) external payable;\n}\n"
    },
    "src/facets/ChallengeTokenFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../libraries/ERC1155Base.sol\";\nimport \"../libraries/ERC1155BaseStorage.sol\";\nimport \"../libraries/ERC1155Enumerable.sol\";\nimport \"../utils/Counters.sol\";\nimport \"../utils/SafeMath.sol\";\nimport \"../interfaces/IChallengeDiamond.sol\";\nimport \"../interfaces/IChallenge.sol\";\nimport {ChallengeStorage} from \"../libraries/LibChallengeStorage.sol\";\nimport {LibBaseRelayRecipient} from \"../libraries/LibBaseRelayRecipient.sol\";\nimport {LibSignatureChecker} from \"../libraries/LibSignatureChecker.sol\";\nimport {ChallengeFacet} from \"./ChallengeFacet.sol\";\nimport \"../libraries/LibDiamond.sol\";\n\ncontract ChallengeTokenFacet is\n    ERC1155Enumerable\n{\n\n    using Counters for Counters.Counter;\n    using SafeMath for uint256;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    event mintedChallenge(\n        uint256 id,\n        uint256 tokenId,\n        string challengeUrl,\n        address to,\n        uint256 amount\n    );\n\n    event boughtChallenges(\n        uint256 challengeId,\n        string challengeUrl,\n        address buyer,\n        uint256 price,\n        uint256 amount\n    );\n    event newTokenPrice(uint256 challengeId, uint256 tokenId, uint256 price);\n\n    ChallengeStorage internal cs; \n\n    function challengeTokenCount(string memory _challengeUrl)\n        public\n        view\n        returns (uint256 challengeTokenCount_)\n    {\n        challengeTokenCount_ = cs._challengeTokens[_challengeUrl].length();\n    }\n\n    function _mintChallengeToken(\n        address to,\n        uint256 challengeId,\n        string memory challengeUrl,\n        string memory jsonUrl,\n        uint256 amount,\n        bytes memory data\n    ) internal returns (uint256[] memory tokenIds_) {\n        Counters.Counter storage tokenIndex =\n            cs._tokenIndexByChallengeId[challengeId];\n        Challenge memory challenge =\n            ChallengeFacet(address(this)).challengeInfoById(challengeId);\n        require(\n            amount < challenge.limit - tokenIndex.current(),\n            \"Cannot mint more than the limit\"\n        );\n        uint256[] memory tokenIds = new uint256[](amount);\n        for (uint256 i = 0; i < amount; i++) {\n            tokenIndex.increment();\n            uint256 id = challengeId + (tokenIndex.current() << 128);\n            cs._challengeTokens[challengeUrl].add(id);\n            cs.tokenChallenge[id] = challengeUrl;\n            Counters.Counter memory priceNonce;\n            cs._challengeTokenById[id] = ChallengeToken(\n                id,\n                \"\",\n                0,\n                priceNonce,\n                challenge\n            );\n            tokenIds[i] = id;\n            _mint(to, id, 1, data);\n            emit URI(jsonUrl, id);\n            // emit mintedChallenge(challengeId, tokenId.current(), challengeUrl, to, amount);\n        }\n        return tokenIds;\n    }\n\n    function firstMint(\n        address to,\n        string calldata challengeUrl,\n        string calldata jsonUrl,\n        bytes calldata data\n    ) external returns (uint256[] memory) {\n        require(LibBaseRelayRecipient._msgSender() == cs.challengeFacet);\n        uint256 challengeId = cs.totalChallenges.current();\n        uint256[] memory tokenIds =\n            _mintChallengeToken(\n                to,\n                challengeId,\n                challengeUrl,\n                jsonUrl,\n                1,\n                data\n            );\n        return tokenIds;\n    }\n\n    function mint(\n        address to,\n        string memory _challengeUrl,\n        uint256 amount,\n        bytes calldata data\n    ) public returns (uint256[] memory) {\n        uint256 challengeId = cs.challengeIdByChallengeUrl[_challengeUrl];\n        Challenge memory challenge =\n            ChallengeFacet(address(this)).challengeInfoById(challengeId);\n\n        require(\n            challenge.athlete == LibBaseRelayRecipient._msgSender(),\n            \"only the athlete can mint!\"\n        );\n\n        require(\n            challengeTokenCount(_challengeUrl) < challenge.limit ||\n                challenge.limit == 0,\n            \"this challenge is over the limit!\"\n        );\n\n        uint256[] memory tokenIds =\n            _mintChallengeToken(\n                to,\n                challenge.id,\n                challenge.challengeUrl,\n                challenge.jsonUrl,\n                amount,\n                data\n            );\n\n        return tokenIds;\n    }\n\n    function mintFromSignature(\n        address to,\n        string memory _challengeUrl,\n        bytes memory signature,\n        uint256 amount,\n        bytes calldata data\n    ) public returns (uint256[] memory) {\n        uint256 challengeId = cs.challengeIdByChallengeUrl[_challengeUrl];\n        require(challengeId > 0, \"this challenge does not exist!\");\n\n        uint256 _count = challengeTokenCount(_challengeUrl);\n        Challenge memory challenge =\n            ChallengeFacet(address(this)).challengeInfoById(challengeId);\n        require(\n            _count < challenge.limit || challenge.limit == 0,\n            \"this challenge is over the limit!\"\n        );\n\n        bytes32 messageHash =\n            keccak256(\n                abi.encodePacked(\n                    bytes1(0x19),\n                    bytes1(0),\n                    address(this),\n                    to,\n                    challenge.challengeUrl,\n                    _count\n                )\n            );\n        bool isAthleteSignature =\n            LibSignatureChecker.checkSignature(messageHash, signature, challenge.athlete);\n        require(\n            isAthleteSignature || !cs.checkSignatureFlag,\n            \"only the athlete can mint!\"\n        );\n\n        uint256[] memory tokenIds =\n            _mintChallengeToken(\n                to,\n                challenge.id,\n                challenge.challengeUrl,\n                challenge.jsonUrl,\n                amount,\n                data\n            );\n\n        return tokenIds;\n    }\n\n    // Lock and Unlock are used for bridgning to mainnet\n\n    // function lock(\n    //     uint256 _tokenId,\n    //     uint256 _amount,\n    //     bytes calldata _data\n    // ) external {\n    //     address _bridgeMediatorAddress = cs.bridgeMediatorAddress;\n    //     require(\n    //         _bridgeMediatorAddress == LibBaseRelayRecipient._msgSender(),\n    //         \"only the bridgeMediator can lock\"\n    //     );\n    //     require(\n    //         ERC1155BaseStorage.layout().nfOwners[_tokenId] == LibBaseRelayRecipient._msgSender(),\n    //         \"address does not have the required amount\"\n    //     );\n    //     address from = ERC1155BaseStorage.layout().nfOwners[_tokenId];\n    //     safeTransferFrom(from, LibBaseRelayRecipient._msgSender(), _tokenId, _amount, _data);\n    // }\n\n    // function unlock(\n    //     uint256 _tokenId,\n    //     address _recipient,\n    //     uint256 _amount,\n    //     bytes calldata _data\n    // ) external {\n    //     require(\n    //         LibBaseRelayRecipient._msgSender() == cs.bridgeMediatorAddress.bridgeMediatorAddress(),\n    //         \"only the bridgeMediator can unlock\"\n    //     );\n    //     require(\n    //         ERC1155BaseStorage.layout().nfOwners[_tokenId] == LibBaseRelayRecipient._msgSender(),\n    //         \"address does not have the required amount\"\n    //     );\n    //     safeTransferFrom(LibBaseRelayRecipient._msgSender(), _recipient, _tokenId, _amount, _data);\n    // }\n\n    function buyChallenges(\n        string memory _challengeUrl,\n        uint256 _amount,\n        bytes calldata _data\n    ) public payable returns (uint256[] memory) {\n        uint256 _challengeId = cs.challengeIdByChallengeUrl[_challengeUrl];\n        require(_challengeId > 0, \"this challenge does not exist!\");\n        Challenge memory challenge = cs._challengeById[_challengeId];\n        require(\n            challenge.challengePrice > 0,\n            \"this challenge does not have a price set\"\n        );\n        uint256 _price = challenge.challengePrice * _amount;\n        require(msg.value >= _price, \"Amount sent too small\");\n\n        require(\n            challenge.limit > challengeTokenCount(_challengeUrl) + _amount,\n            \"this amount requested is over the limit!\"\n        );\n        address _buyer = LibBaseRelayRecipient._msgSender();\n        uint256[] memory _tokenIds =\n            _mintChallengeToken(\n                _buyer,\n                challenge.id,\n                challenge.challengeUrl,\n                challenge.jsonUrl,\n                _amount,\n                _data\n            );\n        //Note: a pull mechanism would be safer here: https://docs.openzeppelin.com/contracts/2.x/api/payment#PullPayment\n        challenge.athlete.transfer(msg.value);\n        emit boughtChallenges(\n            _challengeId,\n            _challengeUrl,\n            _buyer,\n            msg.value,\n            _amount\n        );\n        return _tokenIds;\n    }\n\n    function setTokenPrice(\n        uint256 _challengeId,\n        uint256 _tokenId,\n        uint256 _price\n    ) public returns (uint256) {\n        require(\n            cs._tokenIndexByChallengeId[_challengeId].current() >= _tokenId,\n            \"this token does not exist!\"\n        );\n        require(\n            ERC1155BaseStorage.layout().nfOwners[\n                (_challengeId + _tokenId) << 128\n            ] == LibBaseRelayRecipient._msgSender(),\n            \"only the owner can set the price!\"\n        );\n        ChallengeToken memory challengeToken =\n            cs._challengeTokenById[(_challengeId + _tokenId) << 128];\n        challengeToken.price = _price;\n        emit newTokenPrice(_challengeId, _tokenId, _price);\n        return _price;\n    }\n\n    function buyTokens(\n        uint256 _challengeId,\n        uint256[] calldata _tokenIds,\n        uint256 _amount,\n        bytes calldata data\n    ) public payable {\n        require(\n            _amount == _tokenIds.length,\n            \"Amount requested does not match number of tokenIds\"\n        );\n        uint256[] memory ids = new uint256[](_amount);\n        uint256[] memory amounts = new uint256[](_amount);\n        uint256 totalPrice;\n        for (uint256 i = 0; i < _amount; i++) {\n            uint256 _id = (_challengeId + _tokenIds[i]) << 128;\n            ids[i] = _id;\n            ChallengeToken memory challengeToken = cs._challengeTokenById[_id];\n            require(challengeToken.price > 0, \"this token is not for sale\");\n            totalPrice += challengeToken.price;\n            amounts[i] = 1;\n        }\n        require(msg.value >= totalPrice, \"Amount sent too small\");\n        address payable _seller =\n            payable(ERC1155BaseStorage.layout().nfOwners[ids[0]]);\n        safeBatchTransferFrom(_seller, LibBaseRelayRecipient._msgSender(), ids, amounts, data);\n        //Note: a pull mechanism would be safer here: https://docs.openzeppelin.com/contracts/2.x/api/payment#PullPayment\n\n        uint256 _athleteTake =\n            cs.athleteTake.mul(msg.value).div(100);\n        uint256 _sellerTake = msg.value.sub(_athleteTake);\n        string memory _challengeUrl = cs.tokenChallenge[_challengeId];\n\n        Challenge memory challenge =\n            ChallengeFacet(address(this)).challengeInfoByChallengeUrl(_challengeUrl);\n        challenge.athlete.transfer(_athleteTake);\n        _seller.transfer(_sellerTake);\n\n        emit boughtChallenges(\n            _challengeId,\n            _challengeUrl,\n            LibBaseRelayRecipient._msgSender(),\n            msg.value,\n            _amount\n        );\n    }\n\n    function challengeTokenById(string memory challengeUrl, uint256 tokenId)\n        public\n        view\n        returns (uint256)\n    {\n        return cs._challengeTokens[challengeUrl].at(tokenId);\n    }\n}\n"
    },
    "src/interfaces/IChallenge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../libraries/LibChallengeStorage.sol\";\n\ninterface IChallenge {\n    function createChallenge(\n        string calldata,\n        string calldata,\n        uint256\n    ) external returns (uint256);\n\n    function createChallengeFromSignature(\n        string calldata,\n        string calldata,\n        uint256,\n        address payable,\n        bytes calldata\n    ) external returns (uint256);\n\n    function donate(\n        string calldata,\n        uint256,\n        address\n    ) external payable returns (uint256);\n\n    function withdrawDonation(string calldata, address[] calldata) external;\n\n    function withdrawBalance(string calldata, address[] calldata) external;\n\n    function resolveChallenge(string calldata, uint256) external;\n\n    function challengeStats(uint256) external view returns (string memory);\n\n    function challengeInfoById(uint256)\n        external\n        view\n        returns (Challenge memory);\n\n    function challengeInfoByChallengeUrl(string calldata)\n        external\n        view\n        returns (Challenge memory);\n\n    function setPrice(\n        string calldata,\n        uint256,\n        uint256\n    ) external returns (uint256);\n\n    function setPriceFromSignature(\n        string calldata,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external returns (uint256);\n\n    function owner() external view returns (address);\n\n    function athleteTake() external view returns (uint256);\n}\n"
    },
    "src/facets/OwnershipFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../libraries/LibDiamond.sol\";\nimport \"../interfaces/IERC173.sol\";\n\ncontract OwnershipFacet is IERC173 {\n    function transferOwnership(address _newOwner) external override {\n        LibDiamond.enforceIsContractOwner();\n        LibDiamond.setContractOwner(_newOwner);\n    }\n\n    function owner() external override view returns (address owner_) {\n        owner_ = LibDiamond.contractOwner();\n    }\n}"
    },
    "src/facets/DiamondCutFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nimport \"../interfaces/IDiamondCut.sol\";\nimport \"../libraries/LibDiamond.sol\";\n\ncontract DiamondCutFacet is IDiamondCut {\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external override {\n        LibDiamond.enforceIsContractOwner();\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\n    }\n}"
    },
    "src/libraries/LibERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overloaded;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "src/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
    },
    "src/facets/BaseRelayRecipientFacet.sol": {
      "content": "// SPDX-License-Identifier:MIT\n// solhint-disable no-inline-assembly\npragma solidity ^0.8.0;\n\nimport {LibBaseRelayRecipient} from \"../libraries/LibBaseRelayRecipient.sol\";\n\ncontract BaseRelayRecipientFacet {\n\n    function isTrustedForwarder(address forwarder)\n        external\n        view\n        returns (bool)\n    {\n       return LibBaseRelayRecipient.isTrustedForwarder(forwarder);\n    }\n\n    function _msgSender()\n        external\n        view\n        returns (address payable ret)\n    {\n        return LibBaseRelayRecipient._msgSender();\n    }\n\n    function _msgData()\n        external\n        view\n        returns (bytes memory ret)\n    {\n        return LibBaseRelayRecipient._msgData();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}